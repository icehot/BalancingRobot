
BalancingRobot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003290  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08003418  08003418  00013418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080034bc  080034bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034bc  080034bc  000134bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034c0  080034c0  000134c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080034c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          000003d8  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000448  20000448  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fc8a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023ab  00000000  00000000  0002fd2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bd0  00000000  00000000  000320d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ac8  00000000  00000000  00032ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7aa  00000000  00000000  00033770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f204  00000000  00000000  00051f1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b0796  00000000  00000000  0006111e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001118b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036f0  00000000  00000000  00111908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003400 	.word	0x08003400

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08003400 	.word	0x08003400

080001c8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001d8:	f003 0301 	and.w	r3, r3, #1
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d013      	beq.n	8000208 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001e8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d00b      	beq.n	8000208 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f0:	e000      	b.n	80001f4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001f2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d0f9      	beq.n	80001f2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001fe:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	b2d2      	uxtb	r2, r2
 8000206:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000208:	687b      	ldr	r3, [r7, #4]
}
 800020a:	4618      	mov	r0, r3
 800020c:	370c      	adds	r7, #12
 800020e:	46bd      	mov	sp, r7
 8000210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000214:	4770      	bx	lr

08000216 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	b086      	sub	sp, #24
 800021a:	af00      	add	r7, sp, #0
 800021c:	60f8      	str	r0, [r7, #12]
 800021e:	60b9      	str	r1, [r7, #8]
 8000220:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000222:	2300      	movs	r3, #0
 8000224:	617b      	str	r3, [r7, #20]
 8000226:	e009      	b.n	800023c <_write+0x26>
	{
	   ITM_SendChar( *ptr++ );
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	1c5a      	adds	r2, r3, #1
 800022c:	60ba      	str	r2, [r7, #8]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4618      	mov	r0, r3
 8000232:	f7ff ffc9 	bl	80001c8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	3301      	adds	r3, #1
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	697a      	ldr	r2, [r7, #20]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	429a      	cmp	r2, r3
 8000242:	dbf1      	blt.n	8000228 <_write+0x12>
	}

	return len;
 8000244:	687b      	ldr	r3, [r7, #4]
}
 8000246:	4618      	mov	r0, r3
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000254:	f000 fb74 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000258:	f000 f812 	bl	8000280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800025c:	f000 f910 	bl	8000480 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000260:	f000 f86e 	bl	8000340 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000264:	f000 f8ac 	bl	80003c0 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 8000268:	f000 f8e8 	bl	800043c <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */
  printf(" Hello World!\n");
 800026c:	4803      	ldr	r0, [pc, #12]	; (800027c <main+0x2c>)
 800026e:	f002 fc6f 	bl	8002b50 <puts>
  printf(" Hello World!\n");
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <main+0x2c>)
 8000274:	f002 fc6c 	bl	8002b50 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x28>
 800027a:	bf00      	nop
 800027c:	08003418 	.word	0x08003418

08000280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b09e      	sub	sp, #120	; 0x78
 8000284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000286:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800028a:	2228      	movs	r2, #40	; 0x28
 800028c:	2100      	movs	r1, #0
 800028e:	4618      	mov	r0, r3
 8000290:	f002 fbe8 	bl	8002a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000294:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]
 80002a0:	60da      	str	r2, [r3, #12]
 80002a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002a4:	463b      	mov	r3, r7
 80002a6:	223c      	movs	r2, #60	; 0x3c
 80002a8:	2100      	movs	r1, #0
 80002aa:	4618      	mov	r0, r3
 80002ac:	f002 fbda 	bl	8002a64 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002b0:	2303      	movs	r3, #3
 80002b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80002b8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	2310      	movs	r3, #16
 80002c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c6:	2302      	movs	r3, #2
 80002c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ce:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002d4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002da:	4618      	mov	r0, r3
 80002dc:	f001 f812 	bl	8001304 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002e6:	f000 f949 	bl	800057c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2302      	movs	r3, #2
 80002f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000300:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000304:	2102      	movs	r1, #2
 8000306:	4618      	mov	r0, r3
 8000308:	f001 ff04 	bl	8002114 <HAL_RCC_ClockConfig>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000312:	f000 f933 	bl	800057c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000316:	4b09      	ldr	r3, [pc, #36]	; (800033c <SystemClock_Config+0xbc>)
 8000318:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800031a:	2300      	movs	r3, #0
 800031c:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 800031e:	2300      	movs	r3, #0
 8000320:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	4618      	mov	r0, r3
 8000326:	f002 f8db 	bl	80024e0 <HAL_RCCEx_PeriphCLKConfig>
 800032a:	4603      	mov	r3, r0
 800032c:	2b00      	cmp	r3, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000330:	f000 f924 	bl	800057c <Error_Handler>
  }
}
 8000334:	bf00      	nop
 8000336:	3778      	adds	r7, #120	; 0x78
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	00020020 	.word	0x00020020

08000340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000344:	4b1b      	ldr	r3, [pc, #108]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000346:	4a1c      	ldr	r2, [pc, #112]	; (80003b8 <MX_I2C1_Init+0x78>)
 8000348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_I2C1_Init+0x74>)
 800034c:	4a1b      	ldr	r2, [pc, #108]	; (80003bc <MX_I2C1_Init+0x7c>)
 800034e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000352:	2200      	movs	r2, #0
 8000354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000358:	2201      	movs	r2, #1
 800035a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000362:	4b14      	ldr	r3, [pc, #80]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000364:	2200      	movs	r2, #0
 8000366:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000368:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800036e:	4b11      	ldr	r3, [pc, #68]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000374:	4b0f      	ldr	r3, [pc, #60]	; (80003b4 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800037a:	480e      	ldr	r0, [pc, #56]	; (80003b4 <MX_I2C1_Init+0x74>)
 800037c:	f000 fdbe 	bl	8000efc <HAL_I2C_Init>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000386:	f000 f8f9 	bl	800057c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800038a:	2100      	movs	r1, #0
 800038c:	4809      	ldr	r0, [pc, #36]	; (80003b4 <MX_I2C1_Init+0x74>)
 800038e:	f000 fe44 	bl	800101a <HAL_I2CEx_ConfigAnalogFilter>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000398:	f000 f8f0 	bl	800057c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800039c:	2100      	movs	r1, #0
 800039e:	4805      	ldr	r0, [pc, #20]	; (80003b4 <MX_I2C1_Init+0x74>)
 80003a0:	f000 fe86 	bl	80010b0 <HAL_I2CEx_ConfigDigitalFilter>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d001      	beq.n	80003ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003aa:	f000 f8e7 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000098 	.word	0x20000098
 80003b8:	40005400 	.word	0x40005400
 80003bc:	2000090e 	.word	0x2000090e

080003c0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_SPI1_Init+0x74>)
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <MX_SPI1_Init+0x78>)
 80003c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_SPI1_Init+0x74>)
 80003cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_SPI1_Init+0x74>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <MX_SPI1_Init+0x74>)
 80003da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80003de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003e0:	4b14      	ldr	r3, [pc, #80]	; (8000434 <MX_SPI1_Init+0x74>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003e6:	4b13      	ldr	r3, [pc, #76]	; (8000434 <MX_SPI1_Init+0x74>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_SPI1_Init+0x74>)
 80003ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <MX_SPI1_Init+0x74>)
 80003f6:	2208      	movs	r2, #8
 80003f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003fa:	4b0e      	ldr	r3, [pc, #56]	; (8000434 <MX_SPI1_Init+0x74>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <MX_SPI1_Init+0x74>)
 8000402:	2200      	movs	r2, #0
 8000404:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800040c:	4b09      	ldr	r3, [pc, #36]	; (8000434 <MX_SPI1_Init+0x74>)
 800040e:	2207      	movs	r2, #7
 8000410:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000412:	4b08      	ldr	r3, [pc, #32]	; (8000434 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_SPI1_Init+0x74>)
 800041a:	2208      	movs	r2, #8
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_SPI1_Init+0x74>)
 8000420:	f002 fa0e 	bl	8002840 <HAL_SPI_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800042a:	f000 f8a7 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800042e:	bf00      	nop
 8000430:	bd80      	pop	{r7, pc}
 8000432:	bf00      	nop
 8000434:	200000e4 	.word	0x200000e4
 8000438:	40013000 	.word	0x40013000

0800043c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000440:	4b0d      	ldr	r3, [pc, #52]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 8000442:	4a0e      	ldr	r2, [pc, #56]	; (800047c <MX_USB_PCD_Init+0x40>)
 8000444:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000446:	4b0c      	ldr	r3, [pc, #48]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 8000448:	2208      	movs	r2, #8
 800044a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 800044e:	2202      	movs	r2, #2
 8000450:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000452:	4b09      	ldr	r3, [pc, #36]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 8000454:	2202      	movs	r2, #2
 8000456:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000458:	4b07      	ldr	r3, [pc, #28]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 800045a:	2200      	movs	r2, #0
 800045c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800045e:	4b06      	ldr	r3, [pc, #24]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 8000460:	2200      	movs	r2, #0
 8000462:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000464:	4804      	ldr	r0, [pc, #16]	; (8000478 <MX_USB_PCD_Init+0x3c>)
 8000466:	f000 fe6f 	bl	8001148 <HAL_PCD_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000470:	f000 f884 	bl	800057c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000474:	bf00      	nop
 8000476:	bd80      	pop	{r7, pc}
 8000478:	20000148 	.word	0x20000148
 800047c:	40005c00 	.word	0x40005c00

08000480 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	; 0x28
 8000484:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000486:	f107 0314 	add.w	r3, r7, #20
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]
 8000490:	609a      	str	r2, [r3, #8]
 8000492:	60da      	str	r2, [r3, #12]
 8000494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000496:	4b37      	ldr	r3, [pc, #220]	; (8000574 <MX_GPIO_Init+0xf4>)
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	4a36      	ldr	r2, [pc, #216]	; (8000574 <MX_GPIO_Init+0xf4>)
 800049c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004a0:	6153      	str	r3, [r2, #20]
 80004a2:	4b34      	ldr	r3, [pc, #208]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ae:	4b31      	ldr	r3, [pc, #196]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	4a30      	ldr	r2, [pc, #192]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80004b8:	6153      	str	r3, [r2, #20]
 80004ba:	4b2e      	ldr	r3, [pc, #184]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004c2:	60fb      	str	r3, [r7, #12]
 80004c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004c6:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	4a2a      	ldr	r2, [pc, #168]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004d0:	6153      	str	r3, [r2, #20]
 80004d2:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004da:	60bb      	str	r3, [r7, #8]
 80004dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004de:	4b25      	ldr	r3, [pc, #148]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a24      	ldr	r2, [pc, #144]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004e8:	6153      	str	r3, [r2, #20]
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f6:	4b1f      	ldr	r3, [pc, #124]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	4a1e      	ldr	r2, [pc, #120]	; (8000574 <MX_GPIO_Init+0xf4>)
 80004fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000500:	6153      	str	r3, [r2, #20]
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_GPIO_Init+0xf4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800050a:	603b      	str	r3, [r7, #0]
 800050c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800050e:	2200      	movs	r2, #0
 8000510:	f64f 7108 	movw	r1, #65288	; 0xff08
 8000514:	4818      	ldr	r0, [pc, #96]	; (8000578 <MX_GPIO_Init+0xf8>)
 8000516:	f000 fcd9 	bl	8000ecc <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 800051a:	2337      	movs	r3, #55	; 0x37
 800051c:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800051e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	4812      	ldr	r0, [pc, #72]	; (8000578 <MX_GPIO_Init+0xf8>)
 8000530:	f000 fb52 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000534:	f64f 7308 	movw	r3, #65288	; 0xff08
 8000538:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053a:	2301      	movs	r3, #1
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053e:	2300      	movs	r3, #0
 8000540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000542:	2300      	movs	r3, #0
 8000544:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000546:	f107 0314 	add.w	r3, r7, #20
 800054a:	4619      	mov	r1, r3
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <MX_GPIO_Init+0xf8>)
 800054e:	f000 fb43 	bl	8000bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000552:	2301      	movs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055a:	2300      	movs	r3, #0
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	4619      	mov	r1, r3
 8000564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000568:	f000 fb36 	bl	8000bd8 <HAL_GPIO_Init>

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	; 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000
 8000578:	48001000 	.word	0x48001000

0800057c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000580:	b672      	cpsid	i
}
 8000582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000584:	e7fe      	b.n	8000584 <Error_Handler+0x8>
	...

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <HAL_MspInit+0x44>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a0e      	ldr	r2, [pc, #56]	; (80005cc <HAL_MspInit+0x44>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <HAL_MspInit+0x44>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <HAL_MspInit+0x44>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_MspInit+0x44>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005be:	2007      	movs	r0, #7
 80005c0:	f000 fad6 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40021000 	.word	0x40021000

080005d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08a      	sub	sp, #40	; 0x28
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d8:	f107 0314 	add.w	r3, r7, #20
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
 80005e0:	605a      	str	r2, [r3, #4]
 80005e2:	609a      	str	r2, [r3, #8]
 80005e4:	60da      	str	r2, [r3, #12]
 80005e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <HAL_I2C_MspInit+0x7c>)
 80005ee:	4293      	cmp	r3, r2
 80005f0:	d127      	bne.n	8000642 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_I2C_MspInit+0x80>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <HAL_I2C_MspInit+0x80>)
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_I2C_MspInit+0x80>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 800060a:	23c0      	movs	r3, #192	; 0xc0
 800060c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800060e:	2312      	movs	r3, #18
 8000610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000612:	2301      	movs	r3, #1
 8000614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800061a:	2304      	movs	r3, #4
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	4619      	mov	r1, r3
 8000624:	480b      	ldr	r0, [pc, #44]	; (8000654 <HAL_I2C_MspInit+0x84>)
 8000626:	f000 fad7 	bl	8000bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	; (8000650 <HAL_I2C_MspInit+0x80>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	4a08      	ldr	r2, [pc, #32]	; (8000650 <HAL_I2C_MspInit+0x80>)
 8000630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000634:	61d3      	str	r3, [r2, #28]
 8000636:	4b06      	ldr	r3, [pc, #24]	; (8000650 <HAL_I2C_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000642:	bf00      	nop
 8000644:	3728      	adds	r7, #40	; 0x28
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40005400 	.word	0x40005400
 8000650:	40021000 	.word	0x40021000
 8000654:	48000400 	.word	0x48000400

08000658 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b08a      	sub	sp, #40	; 0x28
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0314 	add.w	r3, r7, #20
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <HAL_SPI_MspInit+0x7c>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d128      	bne.n	80006cc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <HAL_SPI_MspInit+0x80>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <HAL_SPI_MspInit+0x80>)
 8000680:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000684:	6193      	str	r3, [r2, #24]
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <HAL_SPI_MspInit+0x80>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_SPI_MspInit+0x80>)
 8000694:	695b      	ldr	r3, [r3, #20]
 8000696:	4a10      	ldr	r2, [pc, #64]	; (80006d8 <HAL_SPI_MspInit+0x80>)
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	6153      	str	r3, [r2, #20]
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <HAL_SPI_MspInit+0x80>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006a6:	60fb      	str	r3, [r7, #12]
 80006a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006aa:	23e0      	movs	r3, #224	; 0xe0
 80006ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006ba:	2305      	movs	r3, #5
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f000 fa86 	bl	8000bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80006cc:	bf00      	nop
 80006ce:	3728      	adds	r7, #40	; 0x28
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	40013000 	.word	0x40013000
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	f107 0314 	add.w	r3, r7, #20
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a18      	ldr	r2, [pc, #96]	; (800075c <HAL_PCD_MspInit+0x80>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d129      	bne.n	8000752 <HAL_PCD_MspInit+0x76>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b18      	ldr	r3, [pc, #96]	; (8000760 <HAL_PCD_MspInit+0x84>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <HAL_PCD_MspInit+0x84>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <HAL_PCD_MspInit+0x84>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000712:	613b      	str	r3, [r7, #16]
 8000714:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000716:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800071a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071c:	2302      	movs	r3, #2
 800071e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000724:	2303      	movs	r3, #3
 8000726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000728:	230e      	movs	r3, #14
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000736:	f000 fa4f 	bl	8000bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <HAL_PCD_MspInit+0x84>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a08      	ldr	r2, [pc, #32]	; (8000760 <HAL_PCD_MspInit+0x84>)
 8000740:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <HAL_PCD_MspInit+0x84>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40005c00 	.word	0x40005c00
 8000760:	40021000 	.word	0x40021000

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000768:	e7fe      	b.n	8000768 <NMI_Handler+0x4>

0800076a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076a:	b480      	push	{r7}
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076e:	e7fe      	b.n	800076e <HardFault_Handler+0x4>

08000770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <MemManage_Handler+0x4>

08000776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <BusFault_Handler+0x4>

0800077c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <UsageFault_Handler+0x4>

08000782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr

0800079e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr

080007ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b0:	f000 f90c 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
	}

return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80007f2:	b480      	push	{r7}
 80007f4:	b083      	sub	sp, #12
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
	return -1;
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
 8000812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800081a:	605a      	str	r2, [r3, #4]
	return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <_isatty>:

int _isatty(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return 1;
 8000832:	2301      	movs	r3, #1
}
 8000834:	4618      	mov	r0, r3
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	60f8      	str	r0, [r7, #12]
 8000848:	60b9      	str	r1, [r7, #8]
 800084a:	607a      	str	r2, [r7, #4]
	return 0;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3714      	adds	r7, #20
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b086      	sub	sp, #24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000864:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <_sbrk+0x5c>)
 8000866:	4b15      	ldr	r3, [pc, #84]	; (80008bc <_sbrk+0x60>)
 8000868:	1ad3      	subs	r3, r2, r3
 800086a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800086c:	697b      	ldr	r3, [r7, #20]
 800086e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000870:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <_sbrk+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d102      	bne.n	800087e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000878:	4b11      	ldr	r3, [pc, #68]	; (80008c0 <_sbrk+0x64>)
 800087a:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <_sbrk+0x68>)
 800087c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800087e:	4b10      	ldr	r3, [pc, #64]	; (80008c0 <_sbrk+0x64>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	4413      	add	r3, r2
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	429a      	cmp	r2, r3
 800088a:	d207      	bcs.n	800089c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800088c:	f002 f8c0 	bl	8002a10 <__errno>
 8000890:	4603      	mov	r3, r0
 8000892:	220c      	movs	r2, #12
 8000894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	e009      	b.n	80008b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800089c:	4b08      	ldr	r3, [pc, #32]	; (80008c0 <_sbrk+0x64>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008a2:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <_sbrk+0x64>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	4a05      	ldr	r2, [pc, #20]	; (80008c0 <_sbrk+0x64>)
 80008ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008ae:	68fb      	ldr	r3, [r7, #12]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000a000 	.word	0x2000a000
 80008bc:	00000400 	.word	0x00000400
 80008c0:	2000008c 	.word	0x2000008c
 80008c4:	20000448 	.word	0x20000448

080008c8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000924 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008f0:	480d      	ldr	r0, [pc, #52]	; (8000928 <LoopForever+0x6>)
  ldr r1, =_edata
 80008f2:	490e      	ldr	r1, [pc, #56]	; (800092c <LoopForever+0xa>)
  ldr r2, =_sidata
 80008f4:	4a0e      	ldr	r2, [pc, #56]	; (8000930 <LoopForever+0xe>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f8:	e002      	b.n	8000900 <LoopCopyDataInit>

080008fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fe:	3304      	adds	r3, #4

08000900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000904:	d3f9      	bcc.n	80008fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000908:	4c0b      	ldr	r4, [pc, #44]	; (8000938 <LoopForever+0x16>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800090c:	e001      	b.n	8000912 <LoopFillZerobss>

0800090e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000910:	3204      	adds	r2, #4

08000912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000914:	d3fb      	bcc.n	800090e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000916:	f7ff ffd7 	bl	80008c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800091a:	f002 f87f 	bl	8002a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800091e:	f7ff fc97 	bl	8000250 <main>

08000922 <LoopForever>:

LoopForever:
    b LoopForever
 8000922:	e7fe      	b.n	8000922 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000924:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000930:	080034c4 	.word	0x080034c4
  ldr r2, =_sbss
 8000934:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000938:	20000448 	.word	0x20000448

0800093c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC1_2_IRQHandler>
	...

08000940 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <HAL_Init+0x28>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a07      	ldr	r2, [pc, #28]	; (8000968 <HAL_Init+0x28>)
 800094a:	f043 0310 	orr.w	r3, r3, #16
 800094e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f90d 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f808 	bl	800096c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800095c:	f7ff fe14 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40022000 	.word	0x40022000

0800096c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_InitTick+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <HAL_InitTick+0x58>)
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000982:	fbb3 f3f1 	udiv	r3, r3, r1
 8000986:	fbb2 f3f3 	udiv	r3, r2, r3
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f917 	bl	8000bbe <HAL_SYSTICK_Config>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e00e      	b.n	80009b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	2b0f      	cmp	r3, #15
 800099e:	d80a      	bhi.n	80009b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a0:	2200      	movs	r2, #0
 80009a2:	6879      	ldr	r1, [r7, #4]
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	f000 f8ed 	bl	8000b86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <HAL_InitTick+0x5c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000000 	.word	0x20000000
 80009c4:	20000008 	.word	0x20000008
 80009c8:	20000004 	.word	0x20000004

080009cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x20>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_IncTick+0x24>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <HAL_IncTick+0x24>)
 80009de:	6013      	str	r3, [r2, #0]
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000434 	.word	0x20000434

080009f4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <HAL_GetTick+0x14>)
 80009fa:	681b      	ldr	r3, [r3, #0]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	20000434 	.word	0x20000434

08000a0c <__NVIC_SetPriorityGrouping>:
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0307 	and.w	r3, r3, #7
 8000a1a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a1e:	68db      	ldr	r3, [r3, #12]
 8000a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3e:	4a04      	ldr	r2, [pc, #16]	; (8000a50 <__NVIC_SetPriorityGrouping+0x44>)
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	60d3      	str	r3, [r2, #12]
}
 8000a44:	bf00      	nop
 8000a46:	3714      	adds	r7, #20
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_GetPriorityGrouping>:
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a58:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <__NVIC_GetPriorityGrouping+0x18>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	0a1b      	lsrs	r3, r3, #8
 8000a5e:	f003 0307 	and.w	r3, r3, #7
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_SetPriority>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
	...

08000b2c <SysTick_Config>:
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff8e 	bl	8000a70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff47 	bl	8000a0c <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b98:	f7ff ff5c 	bl	8000a54 <__NVIC_GetPriorityGrouping>
 8000b9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	68b9      	ldr	r1, [r7, #8]
 8000ba2:	6978      	ldr	r0, [r7, #20]
 8000ba4:	f7ff ff8e 	bl	8000ac4 <NVIC_EncodePriority>
 8000ba8:	4602      	mov	r2, r0
 8000baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bae:	4611      	mov	r1, r2
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff ff5d 	bl	8000a70 <__NVIC_SetPriority>
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff ffb0 	bl	8000b2c <SysTick_Config>
 8000bcc:	4603      	mov	r3, r0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b087      	sub	sp, #28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be6:	e154      	b.n	8000e92 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	2101      	movs	r1, #1
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f000 8146 	beq.w	8000e8c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d005      	beq.n	8000c18 <HAL_GPIO_Init+0x40>
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d130      	bne.n	8000c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	2203      	movs	r2, #3
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c4e:	2201      	movs	r2, #1
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	091b      	lsrs	r3, r3, #4
 8000c64:	f003 0201 	and.w	r2, r3, #1
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	693a      	ldr	r2, [r7, #16]
 8000c78:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d017      	beq.n	8000cb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	68db      	ldr	r3, [r3, #12]
 8000c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	2203      	movs	r2, #3
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	d123      	bne.n	8000d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	08da      	lsrs	r2, r3, #3
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3208      	adds	r2, #8
 8000cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	220f      	movs	r2, #15
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	693a      	ldr	r2, [r7, #16]
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	691a      	ldr	r2, [r3, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	f003 0307 	and.w	r3, r3, #7
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	08da      	lsrs	r2, r3, #3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3208      	adds	r2, #8
 8000d04:	6939      	ldr	r1, [r7, #16]
 8000d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 0203 	and.w	r2, r3, #3
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	f000 80a0 	beq.w	8000e8c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4c:	4b58      	ldr	r3, [pc, #352]	; (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	4a57      	ldr	r2, [pc, #348]	; (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000d52:	f043 0301 	orr.w	r3, r3, #1
 8000d56:	6193      	str	r3, [r2, #24]
 8000d58:	4b55      	ldr	r3, [pc, #340]	; (8000eb0 <HAL_GPIO_Init+0x2d8>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	f003 0301 	and.w	r3, r3, #1
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d64:	4a53      	ldr	r2, [pc, #332]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	089b      	lsrs	r3, r3, #2
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	220f      	movs	r2, #15
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d8e:	d019      	beq.n	8000dc4 <HAL_GPIO_Init+0x1ec>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a49      	ldr	r2, [pc, #292]	; (8000eb8 <HAL_GPIO_Init+0x2e0>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d013      	beq.n	8000dc0 <HAL_GPIO_Init+0x1e8>
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4a48      	ldr	r2, [pc, #288]	; (8000ebc <HAL_GPIO_Init+0x2e4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d00d      	beq.n	8000dbc <HAL_GPIO_Init+0x1e4>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4a47      	ldr	r2, [pc, #284]	; (8000ec0 <HAL_GPIO_Init+0x2e8>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d007      	beq.n	8000db8 <HAL_GPIO_Init+0x1e0>
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4a46      	ldr	r2, [pc, #280]	; (8000ec4 <HAL_GPIO_Init+0x2ec>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d101      	bne.n	8000db4 <HAL_GPIO_Init+0x1dc>
 8000db0:	2304      	movs	r3, #4
 8000db2:	e008      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000db4:	2305      	movs	r3, #5
 8000db6:	e006      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000db8:	2303      	movs	r3, #3
 8000dba:	e004      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	e002      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e000      	b.n	8000dc6 <HAL_GPIO_Init+0x1ee>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	f002 0203 	and.w	r2, r2, #3
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	4093      	lsls	r3, r2
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000dd6:	4937      	ldr	r1, [pc, #220]	; (8000eb4 <HAL_GPIO_Init+0x2dc>)
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	089b      	lsrs	r3, r3, #2
 8000ddc:	3302      	adds	r3, #2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000de4:	4b38      	ldr	r3, [pc, #224]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d003      	beq.n	8000e08 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e08:	4a2f      	ldr	r2, [pc, #188]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e0e:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	43db      	mvns	r3, r3
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e32:	4a25      	ldr	r2, [pc, #148]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000e5c:	4a1a      	ldr	r2, [pc, #104]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e86:	4a10      	ldr	r2, [pc, #64]	; (8000ec8 <HAL_GPIO_Init+0x2f0>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	fa22 f303 	lsr.w	r3, r2, r3
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	f47f aea3 	bne.w	8000be8 <HAL_GPIO_Init+0x10>
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	371c      	adds	r7, #28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	40010000 	.word	0x40010000
 8000eb8:	48000400 	.word	0x48000400
 8000ebc:	48000800 	.word	0x48000800
 8000ec0:	48000c00 	.word	0x48000c00
 8000ec4:	48001000 	.word	0x48001000
 8000ec8:	40010400 	.word	0x40010400

08000ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	807b      	strh	r3, [r7, #2]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000edc:	787b      	ldrb	r3, [r7, #1]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d003      	beq.n	8000eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ee2:	887a      	ldrh	r2, [r7, #2]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ee8:	e002      	b.n	8000ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eea:	887a      	ldrh	r2, [r7, #2]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d101      	bne.n	8000f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e081      	b.n	8001012 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d106      	bne.n	8000f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff fb54 	bl	80005d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2224      	movs	r2, #36	; 0x24
 8000f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f022 0201 	bic.w	r2, r2, #1
 8000f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685a      	ldr	r2, [r3, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d107      	bne.n	8000f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689a      	ldr	r2, [r3, #8]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	e006      	b.n	8000f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d104      	bne.n	8000f96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	6812      	ldr	r2, [r2, #0]
 8000fa0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fa8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68da      	ldr	r2, [r3, #12]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	691a      	ldr	r2, [r3, #16]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	695b      	ldr	r3, [r3, #20]
 8000fc2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	69d9      	ldr	r1, [r3, #28]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a1a      	ldr	r2, [r3, #32]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	430a      	orrs	r2, r1
 8000fe2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f042 0201 	orr.w	r2, r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2220      	movs	r2, #32
 8000ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
 8001022:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b20      	cmp	r3, #32
 800102e:	d138      	bne.n	80010a2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001036:	2b01      	cmp	r3, #1
 8001038:	d101      	bne.n	800103e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800103a:	2302      	movs	r3, #2
 800103c:	e032      	b.n	80010a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2201      	movs	r2, #1
 8001042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2224      	movs	r2, #36	; 0x24
 800104a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0201 	bic.w	r2, r2, #1
 800105c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800106c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f042 0201 	orr.w	r2, r2, #1
 800108c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2220      	movs	r2, #32
 8001092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80010a2:	2302      	movs	r3, #2
  }
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b20      	cmp	r3, #32
 80010c4:	d139      	bne.n	800113a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d101      	bne.n	80010d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e033      	b.n	800113c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2201      	movs	r2, #1
 80010d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2224      	movs	r2, #36	; 0x24
 80010e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0201 	bic.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001102:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	68fa      	ldr	r2, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68fa      	ldr	r2, [r7, #12]
 8001114:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f042 0201 	orr.w	r2, r2, #1
 8001124:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2220      	movs	r2, #32
 800112a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800113a:	2302      	movs	r3, #2
  }
}
 800113c:	4618      	mov	r0, r3
 800113e:	3714      	adds	r7, #20
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001148:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114a:	b08b      	sub	sp, #44	; 0x2c
 800114c:	af06      	add	r7, sp, #24
 800114e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e0d0      	b.n	80012fc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fab4 	bl	80006dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2203      	movs	r2, #3
 8001178:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f001 fc08 	bl	8002996 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	73fb      	strb	r3, [r7, #15]
 800118a:	e04c      	b.n	8001226 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	1c5a      	adds	r2, r3, #1
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	440b      	add	r3, r1
 800119c:	3301      	adds	r3, #1
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	1c5a      	adds	r2, r3, #1
 80011a8:	4613      	mov	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	440b      	add	r3, r1
 80011b2:	7bfa      	ldrb	r2, [r7, #15]
 80011b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	b298      	uxth	r0, r3
 80011bc:	6879      	ldr	r1, [r7, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	440b      	add	r3, r1
 80011c8:	3336      	adds	r3, #54	; 0x36
 80011ca:	4602      	mov	r2, r0
 80011cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	6879      	ldr	r1, [r7, #4]
 80011d2:	1c5a      	adds	r2, r3, #1
 80011d4:	4613      	mov	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4413      	add	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	440b      	add	r3, r1
 80011de:	3303      	adds	r3, #3
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	440b      	add	r3, r1
 80011f2:	3338      	adds	r3, #56	; 0x38
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	4613      	mov	r3, r2
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4413      	add	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	440b      	add	r3, r1
 8001206:	333c      	adds	r3, #60	; 0x3c
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800120c:	7bfa      	ldrb	r2, [r7, #15]
 800120e:	6879      	ldr	r1, [r7, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	00db      	lsls	r3, r3, #3
 8001218:	440b      	add	r3, r1
 800121a:	3340      	adds	r3, #64	; 0x40
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001220:	7bfb      	ldrb	r3, [r7, #15]
 8001222:	3301      	adds	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	7bfa      	ldrb	r2, [r7, #15]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	429a      	cmp	r2, r3
 800122e:	d3ad      	bcc.n	800118c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e044      	b.n	80012c0 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001236:	7bfa      	ldrb	r2, [r7, #15]
 8001238:	6879      	ldr	r1, [r7, #4]
 800123a:	4613      	mov	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	4413      	add	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	440b      	add	r3, r1
 8001244:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800124c:	7bfa      	ldrb	r2, [r7, #15]
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	4613      	mov	r3, r2
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	4413      	add	r3, r2
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	440b      	add	r3, r1
 800125a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800125e:	7bfa      	ldrb	r2, [r7, #15]
 8001260:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001262:	7bfa      	ldrb	r2, [r7, #15]
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	4613      	mov	r3, r2
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	4413      	add	r3, r2
 800126c:	00db      	lsls	r3, r3, #3
 800126e:	440b      	add	r3, r1
 8001270:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001278:	7bfa      	ldrb	r2, [r7, #15]
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	4613      	mov	r3, r2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	4413      	add	r3, r2
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	440b      	add	r3, r1
 8001286:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800128e:	7bfa      	ldrb	r2, [r7, #15]
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4613      	mov	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	440b      	add	r3, r1
 800129c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	440b      	add	r3, r1
 80012b2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	3301      	adds	r3, #1
 80012be:	73fb      	strb	r3, [r7, #15]
 80012c0:	7bfa      	ldrb	r2, [r7, #15]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3b5      	bcc.n	8001236 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	603b      	str	r3, [r7, #0]
 80012d0:	687e      	ldr	r6, [r7, #4]
 80012d2:	466d      	mov	r5, sp
 80012d4:	f106 0410 	add.w	r4, r6, #16
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012dc:	6823      	ldr	r3, [r4, #0]
 80012de:	602b      	str	r3, [r5, #0]
 80012e0:	1d33      	adds	r3, r6, #4
 80012e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012e4:	6838      	ldr	r0, [r7, #0]
 80012e6:	f001 fb71 	bl	80029cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2201      	movs	r2, #1
 80012f6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3714      	adds	r7, #20
 8001300:	46bd      	mov	sp, r7
 8001302:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800130a:	af00      	add	r7, sp, #0
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d102      	bne.n	800131e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	f000 bef4 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 816a 	beq.w	8001602 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800132e:	4bb3      	ldr	r3, [pc, #716]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b04      	cmp	r3, #4
 8001338:	d00c      	beq.n	8001354 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800133a:	4bb0      	ldr	r3, [pc, #704]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 030c 	and.w	r3, r3, #12
 8001342:	2b08      	cmp	r3, #8
 8001344:	d159      	bne.n	80013fa <HAL_RCC_OscConfig+0xf6>
 8001346:	4bad      	ldr	r3, [pc, #692]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001352:	d152      	bne.n	80013fa <HAL_RCC_OscConfig+0xf6>
 8001354:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001358:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800135c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001360:	fa93 f3a3 	rbit	r3, r3
 8001364:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001368:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	b2db      	uxtb	r3, r3
 8001372:	095b      	lsrs	r3, r3, #5
 8001374:	b2db      	uxtb	r3, r3
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b01      	cmp	r3, #1
 800137e:	d102      	bne.n	8001386 <HAL_RCC_OscConfig+0x82>
 8001380:	4b9e      	ldr	r3, [pc, #632]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	e015      	b.n	80013b2 <HAL_RCC_OscConfig+0xae>
 8001386:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800138a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001392:	fa93 f3a3 	rbit	r3, r3
 8001396:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800139a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800139e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80013ae:	4b93      	ldr	r3, [pc, #588]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80013ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013be:	fa92 f2a2 	rbit	r2, r2
 80013c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80013c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80013ca:	fab2 f282 	clz	r2, r2
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	b2d2      	uxtb	r2, r2
 80013d6:	f002 021f 	and.w	r2, r2, #31
 80013da:	2101      	movs	r1, #1
 80013dc:	fa01 f202 	lsl.w	r2, r1, r2
 80013e0:	4013      	ands	r3, r2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 810c 	beq.w	8001600 <HAL_RCC_OscConfig+0x2fc>
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f040 8106 	bne.w	8001600 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f000 be86 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d106      	bne.n	8001414 <HAL_RCC_OscConfig+0x110>
 8001406:	4b7d      	ldr	r3, [pc, #500]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a7c      	ldr	r2, [pc, #496]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800140c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	e030      	b.n	8001476 <HAL_RCC_OscConfig+0x172>
 8001414:	1d3b      	adds	r3, r7, #4
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d10c      	bne.n	8001438 <HAL_RCC_OscConfig+0x134>
 800141e:	4b77      	ldr	r3, [pc, #476]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a76      	ldr	r2, [pc, #472]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b74      	ldr	r3, [pc, #464]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a73      	ldr	r2, [pc, #460]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e01e      	b.n	8001476 <HAL_RCC_OscConfig+0x172>
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001442:	d10c      	bne.n	800145e <HAL_RCC_OscConfig+0x15a>
 8001444:	4b6d      	ldr	r3, [pc, #436]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a6c      	ldr	r2, [pc, #432]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800144a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800144e:	6013      	str	r3, [r2, #0]
 8001450:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a69      	ldr	r2, [pc, #420]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	e00b      	b.n	8001476 <HAL_RCC_OscConfig+0x172>
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a66      	ldr	r2, [pc, #408]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001464:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b64      	ldr	r3, [pc, #400]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a63      	ldr	r2, [pc, #396]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001476:	4b61      	ldr	r3, [pc, #388]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f023 020f 	bic.w	r2, r3, #15
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	495d      	ldr	r1, [pc, #372]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001486:	4313      	orrs	r3, r2
 8001488:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d059      	beq.n	8001548 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff faae 	bl	80009f4 <HAL_GetTick>
 8001498:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800149c:	e00a      	b.n	80014b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149e:	f7ff faa9 	bl	80009f4 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d902      	bls.n	80014b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	f000 be29 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 80014b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80014c0:	fa93 f3a3 	rbit	r3, r3
 80014c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80014c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014cc:	fab3 f383 	clz	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	095b      	lsrs	r3, r3, #5
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d102      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1e2>
 80014e0:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	e015      	b.n	8001512 <HAL_RCC_OscConfig+0x20e>
 80014e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80014f2:	fa93 f3a3 	rbit	r3, r3
 80014f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80014fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001502:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001512:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001516:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800151a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800151e:	fa92 f2a2 	rbit	r2, r2
 8001522:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001526:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800152a:	fab2 f282 	clz	r2, r2
 800152e:	b2d2      	uxtb	r2, r2
 8001530:	f042 0220 	orr.w	r2, r2, #32
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	f002 021f 	and.w	r2, r2, #31
 800153a:	2101      	movs	r1, #1
 800153c:	fa01 f202 	lsl.w	r2, r1, r2
 8001540:	4013      	ands	r3, r2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d0ab      	beq.n	800149e <HAL_RCC_OscConfig+0x19a>
 8001546:	e05c      	b.n	8001602 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fa54 	bl	80009f4 <HAL_GetTick>
 800154c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fa4f 	bl	80009f4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d902      	bls.n	8001568 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	f000 bdcf 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 8001568:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800156c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001570:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001574:	fa93 f3a3 	rbit	r3, r3
 8001578:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800157c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001580:	fab3 f383 	clz	r3, r3
 8001584:	b2db      	uxtb	r3, r3
 8001586:	095b      	lsrs	r3, r3, #5
 8001588:	b2db      	uxtb	r3, r3
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	b2db      	uxtb	r3, r3
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <HAL_RCC_OscConfig+0x296>
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	e015      	b.n	80015c6 <HAL_RCC_OscConfig+0x2c2>
 800159a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800159e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80015a6:	fa93 f3a3 	rbit	r3, r3
 80015aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015b2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015b6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_RCC_OscConfig+0x2f8>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80015ce:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015d2:	fa92 f2a2 	rbit	r2, r2
 80015d6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80015da:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80015de:	fab2 f282 	clz	r2, r2
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	f042 0220 	orr.w	r2, r2, #32
 80015e8:	b2d2      	uxtb	r2, r2
 80015ea:	f002 021f 	and.w	r2, r2, #31
 80015ee:	2101      	movs	r1, #1
 80015f0:	fa01 f202 	lsl.w	r2, r1, r2
 80015f4:	4013      	ands	r3, r2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ab      	bne.n	8001552 <HAL_RCC_OscConfig+0x24e>
 80015fa:	e002      	b.n	8001602 <HAL_RCC_OscConfig+0x2fe>
 80015fc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 816f 	beq.w	80018f0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001612:	4bd0      	ldr	r3, [pc, #832]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b00      	cmp	r3, #0
 800161c:	d00b      	beq.n	8001636 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800161e:	4bcd      	ldr	r3, [pc, #820]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 030c 	and.w	r3, r3, #12
 8001626:	2b08      	cmp	r3, #8
 8001628:	d16c      	bne.n	8001704 <HAL_RCC_OscConfig+0x400>
 800162a:	4bca      	ldr	r3, [pc, #808]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d166      	bne.n	8001704 <HAL_RCC_OscConfig+0x400>
 8001636:	2302      	movs	r3, #2
 8001638:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001640:	fa93 f3a3 	rbit	r3, r3
 8001644:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001648:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_RCC_OscConfig+0x362>
 8001660:	4bbc      	ldr	r3, [pc, #752]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e013      	b.n	800168e <HAL_RCC_OscConfig+0x38a>
 8001666:	2302      	movs	r3, #2
 8001668:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001670:	fa93 f3a3 	rbit	r3, r3
 8001674:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001678:	2302      	movs	r3, #2
 800167a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800167e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001682:	fa93 f3a3 	rbit	r3, r3
 8001686:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800168a:	4bb2      	ldr	r3, [pc, #712]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	2202      	movs	r2, #2
 8001690:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001694:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001698:	fa92 f2a2 	rbit	r2, r2
 800169c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80016a0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80016a4:	fab2 f282 	clz	r2, r2
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	f042 0220 	orr.w	r2, r2, #32
 80016ae:	b2d2      	uxtb	r2, r2
 80016b0:	f002 021f 	and.w	r2, r2, #31
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ba:	4013      	ands	r3, r2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3cc>
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d002      	beq.n	80016d0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	f000 bd1b 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	21f8      	movs	r1, #248	; 0xf8
 80016e0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80016e8:	fa91 f1a1 	rbit	r1, r1
 80016ec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80016f0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80016f4:	fab1 f181 	clz	r1, r1
 80016f8:	b2c9      	uxtb	r1, r1
 80016fa:	408b      	lsls	r3, r1
 80016fc:	4995      	ldr	r1, [pc, #596]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001702:	e0f5      	b.n	80018f0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001704:	1d3b      	adds	r3, r7, #4
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 8085 	beq.w	800181a <HAL_RCC_OscConfig+0x516>
 8001710:	2301      	movs	r3, #1
 8001712:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001716:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800171a:	fa93 f3a3 	rbit	r3, r3
 800171e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001722:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001730:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	461a      	mov	r2, r3
 8001738:	2301      	movs	r3, #1
 800173a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff f95a 	bl	80009f4 <HAL_GetTick>
 8001740:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001746:	f7ff f955 	bl	80009f4 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d902      	bls.n	800175c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	f000 bcd5 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 800175c:	2302      	movs	r3, #2
 800175e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001766:	fa93 f3a3 	rbit	r3, r3
 800176a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800176e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	095b      	lsrs	r3, r3, #5
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b01      	cmp	r3, #1
 8001784:	d102      	bne.n	800178c <HAL_RCC_OscConfig+0x488>
 8001786:	4b73      	ldr	r3, [pc, #460]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0x4b0>
 800178c:	2302      	movs	r3, #2
 800178e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800179e:	2302      	movs	r3, #2
 80017a0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017a4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80017b0:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	2202      	movs	r2, #2
 80017b6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80017ba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017be:	fa92 f2a2 	rbit	r2, r2
 80017c2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80017c6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80017ca:	fab2 f282 	clz	r2, r2
 80017ce:	b2d2      	uxtb	r2, r2
 80017d0:	f042 0220 	orr.w	r2, r2, #32
 80017d4:	b2d2      	uxtb	r2, r2
 80017d6:	f002 021f 	and.w	r2, r2, #31
 80017da:	2101      	movs	r1, #1
 80017dc:	fa01 f202 	lsl.w	r2, r1, r2
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0af      	beq.n	8001746 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	1d3b      	adds	r3, r7, #4
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	21f8      	movs	r1, #248	; 0xf8
 80017f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80017fe:	fa91 f1a1 	rbit	r1, r1
 8001802:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001806:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800180a:	fab1 f181 	clz	r1, r1
 800180e:	b2c9      	uxtb	r1, r1
 8001810:	408b      	lsls	r3, r1
 8001812:	4950      	ldr	r1, [pc, #320]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001814:	4313      	orrs	r3, r2
 8001816:	600b      	str	r3, [r1, #0]
 8001818:	e06a      	b.n	80018f0 <HAL_RCC_OscConfig+0x5ec>
 800181a:	2301      	movs	r3, #1
 800181c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800182c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800183a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	461a      	mov	r2, r3
 8001842:	2300      	movs	r3, #0
 8001844:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff f8d5 	bl	80009f4 <HAL_GetTick>
 800184a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e00a      	b.n	8001866 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff f8d0 	bl	80009f4 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d902      	bls.n	8001866 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	f000 bc50 	b.w	8002106 <HAL_RCC_OscConfig+0xe02>
 8001866:	2302      	movs	r3, #2
 8001868:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800186c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001870:	fa93 f3a3 	rbit	r3, r3
 8001874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0301 	orr.w	r3, r3, #1
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b01      	cmp	r3, #1
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0x592>
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0x5ba>
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800189c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80018a0:	fa93 f3a3 	rbit	r3, r3
 80018a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80018b2:	fa93 f3a3 	rbit	r3, r3
 80018b6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80018ba:	4b26      	ldr	r3, [pc, #152]	; (8001954 <HAL_RCC_OscConfig+0x650>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	2202      	movs	r2, #2
 80018c0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80018c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018c8:	fa92 f2a2 	rbit	r2, r2
 80018cc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80018d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018d4:	fab2 f282 	clz	r2, r2
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	f042 0220 	orr.w	r2, r2, #32
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	f002 021f 	and.w	r2, r2, #31
 80018e4:	2101      	movs	r1, #1
 80018e6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1af      	bne.n	8001850 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 80da 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d069      	beq.n	80019de <HAL_RCC_OscConfig+0x6da>
 800190a:	2301      	movs	r3, #1
 800190c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001914:	fa93 f3a3 	rbit	r3, r3
 8001918:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800191c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4b0b      	ldr	r3, [pc, #44]	; (8001958 <HAL_RCC_OscConfig+0x654>)
 800192a:	4413      	add	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	461a      	mov	r2, r3
 8001930:	2301      	movs	r3, #1
 8001932:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001934:	f7ff f85e 	bl	80009f4 <HAL_GetTick>
 8001938:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800193c:	e00e      	b.n	800195c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193e:	f7ff f859 	bl	80009f4 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d906      	bls.n	800195c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e3d9      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	10908120 	.word	0x10908120
 800195c:	2302      	movs	r3, #2
 800195e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001962:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001966:	fa93 f3a3 	rbit	r3, r3
 800196a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800196e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001972:	2202      	movs	r2, #2
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	fa93 f2a3 	rbit	r2, r3
 8001980:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800198a:	2202      	movs	r2, #2
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fa93 f2a3 	rbit	r2, r3
 8001998:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800199c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199e:	4ba5      	ldr	r3, [pc, #660]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 80019a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019a2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019a6:	2102      	movs	r1, #2
 80019a8:	6019      	str	r1, [r3, #0]
 80019aa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	fa93 f1a3 	rbit	r1, r3
 80019b4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019b8:	6019      	str	r1, [r3, #0]
  return result;
 80019ba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 031f 	and.w	r3, r3, #31
 80019d0:	2101      	movs	r1, #1
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	4013      	ands	r3, r2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0b0      	beq.n	800193e <HAL_RCC_OscConfig+0x63a>
 80019dc:	e06a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7b0>
 80019de:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019f4:	601a      	str	r2, [r3, #0]
  return result;
 80019f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019fa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b8c      	ldr	r3, [pc, #560]	; (8001c38 <HAL_RCC_OscConfig+0x934>)
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7fe fff0 	bl	80009f4 <HAL_GetTick>
 8001a14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a18:	e009      	b.n	8001a2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f7fe ffeb 	bl	80009f4 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e36b      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001a2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a4a:	2202      	movs	r2, #2
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a62:	2202      	movs	r2, #2
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	fa93 f2a3 	rbit	r2, r3
 8001a70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a76:	4b6f      	ldr	r3, [pc, #444]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001a78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a7e:	2102      	movs	r1, #2
 8001a80:	6019      	str	r1, [r3, #0]
 8001a82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f1a3 	rbit	r1, r3
 8001a8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a90:	6019      	str	r1, [r3, #0]
  return result;
 8001a92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	fab3 f383 	clz	r3, r3
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	f003 031f 	and.w	r3, r3, #31
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1b2      	bne.n	8001a1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab4:	1d3b      	adds	r3, r7, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f000 8158 	beq.w	8001d74 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d112      	bne.n	8001afc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4a56      	ldr	r2, [pc, #344]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	61d3      	str	r3, [r2, #28]
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001af6:	2301      	movs	r3, #1
 8001af8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11a      	bne.n	8001b3e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b14:	f7fe ff6e 	bl	80009f4 <HAL_GetTick>
 8001b18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e009      	b.n	8001b32 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7fe ff69 	bl	80009f4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b64      	cmp	r3, #100	; 0x64
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e2e9      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCC_OscConfig+0x938>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0ef      	beq.n	8001b1e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d106      	bne.n	8001b56 <HAL_RCC_OscConfig+0x852>
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b4a:	6a1b      	ldr	r3, [r3, #32]
 8001b4c:	4a39      	ldr	r2, [pc, #228]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6213      	str	r3, [r2, #32]
 8001b54:	e02f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8b2>
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x876>
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a33      	ldr	r2, [pc, #204]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a30      	ldr	r2, [pc, #192]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b72:	f023 0304 	bic.w	r3, r3, #4
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e01d      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8b2>
 8001b7a:	1d3b      	adds	r3, r7, #4
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d10c      	bne.n	8001b9e <HAL_RCC_OscConfig+0x89a>
 8001b84:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b86:	6a1b      	ldr	r3, [r3, #32]
 8001b88:	4a2a      	ldr	r2, [pc, #168]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	6213      	str	r3, [r2, #32]
 8001b90:	4b28      	ldr	r3, [pc, #160]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b92:	6a1b      	ldr	r3, [r3, #32]
 8001b94:	4a27      	ldr	r2, [pc, #156]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001b96:	f043 0301 	orr.w	r3, r3, #1
 8001b9a:	6213      	str	r3, [r2, #32]
 8001b9c:	e00b      	b.n	8001bb6 <HAL_RCC_OscConfig+0x8b2>
 8001b9e:	4b25      	ldr	r3, [pc, #148]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b22      	ldr	r3, [pc, #136]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d06b      	beq.n	8001c98 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe ff18 	bl	80009f4 <HAL_GetTick>
 8001bc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00b      	b.n	8001be2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7fe ff13 	bl	80009f4 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e291      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001be2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001be6:	2202      	movs	r2, #2
 8001be8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	fa93 f2a3 	rbit	r2, r3
 8001bf4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001bfe:	2202      	movs	r2, #2
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	fa93 f2a3 	rbit	r2, r3
 8001c0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c10:	601a      	str	r2, [r3, #0]
  return result;
 8001c12:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_OscConfig+0x93c>
 8001c2c:	4b01      	ldr	r3, [pc, #4]	; (8001c34 <HAL_RCC_OscConfig+0x930>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	e014      	b.n	8001c5c <HAL_RCC_OscConfig+0x958>
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000
 8001c38:	10908120 	.word	0x10908120
 8001c3c:	40007000 	.word	0x40007000
 8001c40:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c44:	2202      	movs	r2, #2
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4bbb      	ldr	r3, [pc, #748]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c60:	2102      	movs	r1, #2
 8001c62:	6011      	str	r1, [r2, #0]
 8001c64:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c68:	6812      	ldr	r2, [r2, #0]
 8001c6a:	fa92 f1a2 	rbit	r1, r2
 8001c6e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c72:	6011      	str	r1, [r2, #0]
  return result;
 8001c74:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fab2 f282 	clz	r2, r2
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	f002 021f 	and.w	r2, r2, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d099      	beq.n	8001bca <HAL_RCC_OscConfig+0x8c6>
 8001c96:	e063      	b.n	8001d60 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c98:	f7fe feac 	bl	80009f4 <HAL_GetTick>
 8001c9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca0:	e00b      	b.n	8001cba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7fe fea7 	bl	80009f4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e225      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001cba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ce8:	601a      	str	r2, [r3, #0]
  return result;
 8001cea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001cee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	f043 0302 	orr.w	r3, r3, #2
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d102      	bne.n	8001d0a <HAL_RCC_OscConfig+0xa06>
 8001d04:	4b90      	ldr	r3, [pc, #576]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	e00d      	b.n	8001d26 <HAL_RCC_OscConfig+0xa22>
 8001d0a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d0e:	2202      	movs	r2, #2
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	6011      	str	r1, [r2, #0]
 8001d2e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fa92 f1a2 	rbit	r1, r2
 8001d38:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d3c:	6011      	str	r1, [r2, #0]
  return result;
 8001d3e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1a0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d60:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d105      	bne.n	8001d74 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d68:	4b77      	ldr	r3, [pc, #476]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d6a:	69db      	ldr	r3, [r3, #28]
 8001d6c:	4a76      	ldr	r2, [pc, #472]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d72:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 81c2 	beq.w	8002104 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d80:	4b71      	ldr	r3, [pc, #452]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 030c 	and.w	r3, r3, #12
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	f000 819c 	beq.w	80020c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	f040 8114 	bne.w	8001fc2 <HAL_RCC_OscConfig+0xcbe>
 8001d9a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001d9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001da2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	fa93 f2a3 	rbit	r2, r3
 8001dae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db2:	601a      	str	r2, [r3, #0]
  return result;
 8001db4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001db8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dba:	fab3 f383 	clz	r3, r3
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001dc4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fe10 	bl	80009f4 <HAL_GetTick>
 8001dd4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd8:	e009      	b.n	8001dee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dda:	f7fe fe0b 	bl	80009f4 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e18b      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001dee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001df2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	fa93 f2a3 	rbit	r2, r3
 8001e02:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e06:	601a      	str	r2, [r3, #0]
  return result;
 8001e08:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	fab3 f383 	clz	r3, r3
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	095b      	lsrs	r3, r3, #5
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d102      	bne.n	8001e28 <HAL_RCC_OscConfig+0xb24>
 8001e22:	4b49      	ldr	r3, [pc, #292]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	e01b      	b.n	8001e60 <HAL_RCC_OscConfig+0xb5c>
 8001e28:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	fa93 f2a3 	rbit	r2, r3
 8001e3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	fa93 f2a3 	rbit	r2, r3
 8001e56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	4b3a      	ldr	r3, [pc, #232]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e6e:	6812      	ldr	r2, [r2, #0]
 8001e70:	fa92 f1a2 	rbit	r1, r2
 8001e74:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e78:	6011      	str	r1, [r2, #0]
  return result;
 8001e7a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e7e:	6812      	ldr	r2, [r2, #0]
 8001e80:	fab2 f282 	clz	r2, r2
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	b2d2      	uxtb	r2, r2
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2101      	movs	r1, #1
 8001e92:	fa01 f202 	lsl.w	r2, r1, r2
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d19e      	bne.n	8001dda <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9c:	4b2a      	ldr	r3, [pc, #168]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ea4:	1d3b      	adds	r3, r7, #4
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	430b      	orrs	r3, r1
 8001eb2:	4925      	ldr	r1, [pc, #148]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ec0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	fa93 f2a3 	rbit	r2, r3
 8001ecc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed0:	601a      	str	r2, [r3, #0]
  return result;
 8001ed2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ed6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	fab3 f383 	clz	r3, r3
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ee2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	461a      	mov	r2, r3
 8001eea:	2301      	movs	r3, #1
 8001eec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eee:	f7fe fd81 	bl	80009f4 <HAL_GetTick>
 8001ef2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef6:	e009      	b.n	8001f0c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ef8:	f7fe fd7c 	bl	80009f4 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0fc      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8001f0c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	fa93 f2a3 	rbit	r2, r3
 8001f20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f24:	601a      	str	r2, [r3, #0]
  return result;
 8001f26:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f2c:	fab3 f383 	clz	r3, r3
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	095b      	lsrs	r3, r3, #5
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	f043 0301 	orr.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_RCC_OscConfig+0xc48>
 8001f40:	4b01      	ldr	r3, [pc, #4]	; (8001f48 <HAL_RCC_OscConfig+0xc44>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	e01e      	b.n	8001f84 <HAL_RCC_OscConfig+0xc80>
 8001f46:	bf00      	nop
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	fa93 f2a3 	rbit	r2, r3
 8001f60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b63      	ldr	r3, [pc, #396]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001f8c:	6011      	str	r1, [r2, #0]
 8001f8e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	fa92 f1a2 	rbit	r1, r2
 8001f98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001f9c:	6011      	str	r1, [r2, #0]
  return result;
 8001f9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	fab2 f282 	clz	r2, r2
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	f042 0220 	orr.w	r2, r2, #32
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	f002 021f 	and.w	r2, r2, #31
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d09b      	beq.n	8001ef8 <HAL_RCC_OscConfig+0xbf4>
 8001fc0:	e0a0      	b.n	8002104 <HAL_RCC_OscConfig+0xe00>
 8001fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fc6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fda:	601a      	str	r2, [r3, #0]
  return result;
 8001fdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fe0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff8:	f7fe fcfc 	bl	80009f4 <HAL_GetTick>
 8001ffc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002000:	e009      	b.n	8002016 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002002:	f7fe fcf7 	bl	80009f4 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e077      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
 8002016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	fa93 f2a3 	rbit	r2, r3
 800202a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202e:	601a      	str	r2, [r3, #0]
  return result;
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0xd4c>
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e01b      	b.n	8002088 <HAL_RCC_OscConfig+0xd84>
 8002050:	f107 0320 	add.w	r3, r7, #32
 8002054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f107 0320 	add.w	r3, r7, #32
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	fa93 f2a3 	rbit	r2, r3
 8002064:	f107 031c 	add.w	r3, r7, #28
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	f107 0318 	add.w	r3, r7, #24
 800206e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	f107 0318 	add.w	r3, r7, #24
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	fa93 f2a3 	rbit	r2, r3
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	f107 0210 	add.w	r2, r7, #16
 800208c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002090:	6011      	str	r1, [r2, #0]
 8002092:	f107 0210 	add.w	r2, r7, #16
 8002096:	6812      	ldr	r2, [r2, #0]
 8002098:	fa92 f1a2 	rbit	r1, r2
 800209c:	f107 020c 	add.w	r2, r7, #12
 80020a0:	6011      	str	r1, [r2, #0]
  return result;
 80020a2:	f107 020c 	add.w	r2, r7, #12
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	fab2 f282 	clz	r2, r2
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	f042 0220 	orr.w	r2, r2, #32
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f002 021f 	and.w	r2, r2, #31
 80020b8:	2101      	movs	r1, #1
 80020ba:	fa01 f202 	lsl.w	r2, r1, r2
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d19e      	bne.n	8002002 <HAL_RCC_OscConfig+0xcfe>
 80020c4:	e01e      	b.n	8002104 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e018      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCC_OscConfig+0xe0c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d108      	bne.n	8002100 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80020ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80020f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d001      	beq.n	8002104 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b09e      	sub	sp, #120	; 0x78
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e162      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b90      	ldr	r3, [pc, #576]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b8d      	ldr	r3, [pc, #564]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	498b      	ldr	r1, [pc, #556]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b89      	ldr	r3, [pc, #548]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e14a      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002168:	4b82      	ldr	r3, [pc, #520]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	497f      	ldr	r1, [pc, #508]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002176:	4313      	orrs	r3, r2
 8002178:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	f000 80dc 	beq.w	8002340 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d13c      	bne.n	800220a <HAL_RCC_ClockConfig+0xf6>
 8002190:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002194:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002198:	fa93 f3a3 	rbit	r3, r3
 800219c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a0:	fab3 f383 	clz	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d102      	bne.n	80021ba <HAL_RCC_ClockConfig+0xa6>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	e00f      	b.n	80021da <HAL_RCC_ClockConfig+0xc6>
 80021ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021c2:	fa93 f3a3 	rbit	r3, r3
 80021c6:	667b      	str	r3, [r7, #100]	; 0x64
 80021c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021cc:	663b      	str	r3, [r7, #96]	; 0x60
 80021ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021d6:	4b67      	ldr	r3, [pc, #412]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80021d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021de:	65ba      	str	r2, [r7, #88]	; 0x58
 80021e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021e2:	fa92 f2a2 	rbit	r2, r2
 80021e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80021e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021ea:	fab2 f282 	clz	r2, r2
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	f042 0220 	orr.w	r2, r2, #32
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f002 021f 	and.w	r2, r2, #31
 80021fa:	2101      	movs	r1, #1
 80021fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002200:	4013      	ands	r3, r2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d17b      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e0f3      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d13c      	bne.n	800228c <HAL_RCC_ClockConfig+0x178>
 8002212:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	fa93 f3a3 	rbit	r3, r3
 800221e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	095b      	lsrs	r3, r3, #5
 800222a:	b2db      	uxtb	r3, r3
 800222c:	f043 0301 	orr.w	r3, r3, #1
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b01      	cmp	r3, #1
 8002234:	d102      	bne.n	800223c <HAL_RCC_ClockConfig+0x128>
 8002236:	4b4f      	ldr	r3, [pc, #316]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	e00f      	b.n	800225c <HAL_RCC_ClockConfig+0x148>
 800223c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002240:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002244:	fa93 f3a3 	rbit	r3, r3
 8002248:	647b      	str	r3, [r7, #68]	; 0x44
 800224a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800224e:	643b      	str	r3, [r7, #64]	; 0x40
 8002250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002258:	4b46      	ldr	r3, [pc, #280]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800225a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002260:	63ba      	str	r2, [r7, #56]	; 0x38
 8002262:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002264:	fa92 f2a2 	rbit	r2, r2
 8002268:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800226a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800226c:	fab2 f282 	clz	r2, r2
 8002270:	b2d2      	uxtb	r2, r2
 8002272:	f042 0220 	orr.w	r2, r2, #32
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	f002 021f 	and.w	r2, r2, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f202 	lsl.w	r2, r1, r2
 8002282:	4013      	ands	r3, r2
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13a      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0b2      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
 800228c:	2302      	movs	r3, #2
 800228e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	fa93 f3a3 	rbit	r3, r3
 8002296:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	fab3 f383 	clz	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	095b      	lsrs	r3, r3, #5
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d102      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x1a0>
 80022ae:	4b31      	ldr	r3, [pc, #196]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e00d      	b.n	80022d0 <HAL_RCC_ClockConfig+0x1bc>
 80022b4:	2302      	movs	r3, #2
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
 80022c0:	2302      	movs	r3, #2
 80022c2:	623b      	str	r3, [r7, #32]
 80022c4:	6a3b      	ldr	r3, [r7, #32]
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	61fb      	str	r3, [r7, #28]
 80022cc:	4b29      	ldr	r3, [pc, #164]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	2202      	movs	r2, #2
 80022d2:	61ba      	str	r2, [r7, #24]
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	617a      	str	r2, [r7, #20]
  return result;
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	fab2 f282 	clz	r2, r2
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	b2d2      	uxtb	r2, r2
 80022ea:	f002 021f 	and.w	r2, r2, #31
 80022ee:	2101      	movs	r1, #1
 80022f0:	fa01 f202 	lsl.w	r2, r1, r2
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e079      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	491a      	ldr	r1, [pc, #104]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 800230c:	4313      	orrs	r3, r2
 800230e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002310:	f7fe fb70 	bl	80009f4 <HAL_GetTick>
 8002314:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7fe fb6c 	bl	80009f4 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e061      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_RCC_ClockConfig+0x260>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d214      	bcs.n	8002378 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f023 0207 	bic.w	r2, r3, #7
 8002356:	4906      	ldr	r1, [pc, #24]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	4313      	orrs	r3, r2
 800235c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_ClockConfig+0x25c>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e040      	b.n	80023f2 <HAL_RCC_ClockConfig+0x2de>
 8002370:	40022000 	.word	0x40022000
 8002374:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0304 	and.w	r3, r3, #4
 8002380:	2b00      	cmp	r3, #0
 8002382:	d008      	beq.n	8002396 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002384:	4b1d      	ldr	r3, [pc, #116]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	491a      	ldr	r1, [pc, #104]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 8002392:	4313      	orrs	r3, r2
 8002394:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d009      	beq.n	80023b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4912      	ldr	r1, [pc, #72]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023b6:	f000 f829 	bl	800240c <HAL_RCC_GetSysClockFreq>
 80023ba:	4601      	mov	r1, r0
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <HAL_RCC_ClockConfig+0x2e8>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023c4:	22f0      	movs	r2, #240	; 0xf0
 80023c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	fa92 f2a2 	rbit	r2, r2
 80023ce:	60fa      	str	r2, [r7, #12]
  return result;
 80023d0:	68fa      	ldr	r2, [r7, #12]
 80023d2:	fab2 f282 	clz	r2, r2
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	40d3      	lsrs	r3, r2
 80023da:	4a09      	ldr	r2, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x2ec>)
 80023dc:	5cd3      	ldrb	r3, [r2, r3]
 80023de:	fa21 f303 	lsr.w	r3, r1, r3
 80023e2:	4a08      	ldr	r2, [pc, #32]	; (8002404 <HAL_RCC_ClockConfig+0x2f0>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <HAL_RCC_ClockConfig+0x2f4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fabe 	bl	800096c <HAL_InitTick>
  
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3778      	adds	r7, #120	; 0x78
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40021000 	.word	0x40021000
 8002400:	08003428 	.word	0x08003428
 8002404:	20000000 	.word	0x20000000
 8002408:	20000004 	.word	0x20000004

0800240c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800240c:	b480      	push	{r7}
 800240e:	b08b      	sub	sp, #44	; 0x2c
 8002410:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	2300      	movs	r3, #0
 8002418:	61bb      	str	r3, [r7, #24]
 800241a:	2300      	movs	r3, #0
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b04      	cmp	r3, #4
 8002434:	d002      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0x30>
 8002436:	2b08      	cmp	r3, #8
 8002438:	d003      	beq.n	8002442 <HAL_RCC_GetSysClockFreq+0x36>
 800243a:	e03c      	b.n	80024b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800243c:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800243e:	623b      	str	r3, [r7, #32]
      break;
 8002440:	e03c      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002448:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800244c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	607a      	str	r2, [r7, #4]
  return result;
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	40d3      	lsrs	r3, r2
 8002460:	4a1c      	ldr	r2, [pc, #112]	; (80024d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002462:	5cd3      	ldrb	r3, [r2, r3]
 8002464:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002466:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	220f      	movs	r2, #15
 8002470:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	fa92 f2a2 	rbit	r2, r2
 8002478:	60fa      	str	r2, [r7, #12]
  return result;
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	fab2 f282 	clz	r2, r2
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	40d3      	lsrs	r3, r2
 8002484:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002486:	5cd3      	ldrb	r3, [r2, r3]
 8002488:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d008      	beq.n	80024a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002494:	4a0e      	ldr	r2, [pc, #56]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	fbb2 f2f3 	udiv	r2, r2, r3
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	fb02 f303 	mul.w	r3, r2, r3
 80024a2:	627b      	str	r3, [r7, #36]	; 0x24
 80024a4:	e004      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80024aa:	fb02 f303 	mul.w	r3, r2, r3
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	623b      	str	r3, [r7, #32]
      break;
 80024b4:	e002      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024b6:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024b8:	623b      	str	r3, [r7, #32]
      break;
 80024ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024bc:	6a3b      	ldr	r3, [r7, #32]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	372c      	adds	r7, #44	; 0x2c
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	007a1200 	.word	0x007a1200
 80024d4:	08003438 	.word	0x08003438
 80024d8:	08003448 	.word	0x08003448
 80024dc:	003d0900 	.word	0x003d0900

080024e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b092      	sub	sp, #72	; 0x48
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80d4 	beq.w	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002504:	4b4e      	ldr	r3, [pc, #312]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10e      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b4b      	ldr	r3, [pc, #300]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4a4a      	ldr	r2, [pc, #296]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251a:	61d3      	str	r3, [r2, #28]
 800251c:	4b48      	ldr	r3, [pc, #288]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252e:	4b45      	ldr	r3, [pc, #276]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d118      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253a:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a41      	ldr	r2, [pc, #260]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002546:	f7fe fa55 	bl	80009f4 <HAL_GetTick>
 800254a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800254c:	e008      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254e:	f7fe fa51 	bl	80009f4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b64      	cmp	r3, #100	; 0x64
 800255a:	d901      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e169      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b38      	ldr	r3, [pc, #224]	; (8002644 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002574:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 8084 	beq.w	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002586:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002588:	429a      	cmp	r2, r3
 800258a:	d07c      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002594:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80025a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4b26      	ldr	r3, [pc, #152]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	461a      	mov	r2, r3
 80025b6:	2301      	movs	r3, #1
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80025c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b1d      	ldr	r3, [pc, #116]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025d4:	4413      	add	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	461a      	mov	r2, r3
 80025da:	2300      	movs	r3, #0
 80025dc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025de:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d04b      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ee:	f7fe fa01 	bl	80009f4 <HAL_GetTick>
 80025f2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025f6:	f7fe f9fd 	bl	80009f4 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	f241 3288 	movw	r2, #5000	; 0x1388
 8002604:	4293      	cmp	r3, r2
 8002606:	d901      	bls.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e113      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x354>
 800260c:	2302      	movs	r3, #2
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
 8002618:	2302      	movs	r3, #2
 800261a:	623b      	str	r3, [r7, #32]
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	fa93 f3a3 	rbit	r3, r3
 8002622:	61fb      	str	r3, [r7, #28]
  return result;
 8002624:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002626:	fab3 f383 	clz	r3, r3
 800262a:	b2db      	uxtb	r3, r3
 800262c:	095b      	lsrs	r3, r3, #5
 800262e:	b2db      	uxtb	r3, r3
 8002630:	f043 0302 	orr.w	r3, r3, #2
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d108      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800263a:	4b01      	ldr	r3, [pc, #4]	; (8002640 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	e00d      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002640:	40021000 	.word	0x40021000
 8002644:	40007000 	.word	0x40007000
 8002648:	10908100 	.word	0x10908100
 800264c:	2302      	movs	r3, #2
 800264e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	617b      	str	r3, [r7, #20]
 8002658:	4b78      	ldr	r3, [pc, #480]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	2202      	movs	r2, #2
 800265e:	613a      	str	r2, [r7, #16]
 8002660:	693a      	ldr	r2, [r7, #16]
 8002662:	fa92 f2a2 	rbit	r2, r2
 8002666:	60fa      	str	r2, [r7, #12]
  return result;
 8002668:	68fa      	ldr	r2, [r7, #12]
 800266a:	fab2 f282 	clz	r2, r2
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	f002 021f 	and.w	r2, r2, #31
 800267a:	2101      	movs	r1, #1
 800267c:	fa01 f202 	lsl.w	r2, r1, r2
 8002680:	4013      	ands	r3, r2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d0b7      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002686:	4b6d      	ldr	r3, [pc, #436]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	496a      	ldr	r1, [pc, #424]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002694:	4313      	orrs	r3, r2
 8002696:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002698:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026a0:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026aa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d008      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026b8:	4b60      	ldr	r3, [pc, #384]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	f023 0203 	bic.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	495d      	ldr	r1, [pc, #372]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d008      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026d6:	4b59      	ldr	r3, [pc, #356]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	4956      	ldr	r1, [pc, #344]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026f4:	4b51      	ldr	r3, [pc, #324]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	494e      	ldr	r1, [pc, #312]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002702:	4313      	orrs	r3, r2
 8002704:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002712:	4b4a      	ldr	r3, [pc, #296]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f023 0210 	bic.w	r2, r3, #16
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	69db      	ldr	r3, [r3, #28]
 800271e:	4947      	ldr	r1, [pc, #284]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002720:	4313      	orrs	r3, r2
 8002722:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d008      	beq.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002730:	4b42      	ldr	r3, [pc, #264]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273c:	493f      	ldr	r1, [pc, #252]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274a:	2b00      	cmp	r3, #0
 800274c:	d008      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800274e:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	f023 0220 	bic.w	r2, r3, #32
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4938      	ldr	r1, [pc, #224]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800275c:	4313      	orrs	r3, r2
 800275e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d008      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800276c:	4b33      	ldr	r3, [pc, #204]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
 8002778:	4930      	ldr	r1, [pc, #192]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800277a:	4313      	orrs	r3, r2
 800277c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	2b00      	cmp	r3, #0
 8002788:	d008      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800278a:	4b2c      	ldr	r3, [pc, #176]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	699b      	ldr	r3, [r3, #24]
 8002796:	4929      	ldr	r1, [pc, #164]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	4921      	ldr	r1, [pc, #132]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d008      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	491a      	ldr	r1, [pc, #104]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d008      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80027e4:	4b15      	ldr	r3, [pc, #84]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	4912      	ldr	r1, [pc, #72]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d008      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002806:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280e:	490b      	ldr	r1, [pc, #44]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002810:	4313      	orrs	r3, r2
 8002812:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282c:	4903      	ldr	r1, [pc, #12]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800282e:	4313      	orrs	r3, r2
 8002830:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3748      	adds	r7, #72	; 0x48
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e09d      	b.n	800298e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d108      	bne.n	800286c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002862:	d009      	beq.n	8002878 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	61da      	str	r2, [r3, #28]
 800286a:	e005      	b.n	8002878 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fd fee0 	bl	8000658 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028b8:	d902      	bls.n	80028c0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	e002      	b.n	80028c6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028ce:	d007      	beq.n	80028e0 <HAL_SPI_Init+0xa0>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028d8:	d002      	beq.n	80028e0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80028f0:	431a      	orrs	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	691b      	ldr	r3, [r3, #16]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	431a      	orrs	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	69db      	ldr	r3, [r3, #28]
 8002914:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002918:	431a      	orrs	r2, r3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	ea42 0103 	orr.w	r1, r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	0c1b      	lsrs	r3, r3, #16
 800293c:	f003 0204 	and.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	431a      	orrs	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800295c:	ea42 0103 	orr.w	r1, r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800298c:	2300      	movs	r3, #0
}
 800298e:	4618      	mov	r0, r3
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}

08002996 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002996:	b480      	push	{r7}
 8002998:	b085      	sub	sp, #20
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800299e:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80029a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	4013      	ands	r3, r2
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3714      	adds	r7, #20
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029cc:	b084      	sub	sp, #16
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
 80029d6:	f107 0014 	add.w	r0, r7, #20
 80029da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	b004      	add	sp, #16
 8002a0c:	4770      	bx	lr
	...

08002a10 <__errno>:
 8002a10:	4b01      	ldr	r3, [pc, #4]	; (8002a18 <__errno+0x8>)
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	2000000c 	.word	0x2000000c

08002a1c <__libc_init_array>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	4d0d      	ldr	r5, [pc, #52]	; (8002a54 <__libc_init_array+0x38>)
 8002a20:	4c0d      	ldr	r4, [pc, #52]	; (8002a58 <__libc_init_array+0x3c>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	2600      	movs	r6, #0
 8002a28:	42a6      	cmp	r6, r4
 8002a2a:	d109      	bne.n	8002a40 <__libc_init_array+0x24>
 8002a2c:	4d0b      	ldr	r5, [pc, #44]	; (8002a5c <__libc_init_array+0x40>)
 8002a2e:	4c0c      	ldr	r4, [pc, #48]	; (8002a60 <__libc_init_array+0x44>)
 8002a30:	f000 fce6 	bl	8003400 <_init>
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	2600      	movs	r6, #0
 8002a3a:	42a6      	cmp	r6, r4
 8002a3c:	d105      	bne.n	8002a4a <__libc_init_array+0x2e>
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}
 8002a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a44:	4798      	blx	r3
 8002a46:	3601      	adds	r6, #1
 8002a48:	e7ee      	b.n	8002a28 <__libc_init_array+0xc>
 8002a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4e:	4798      	blx	r3
 8002a50:	3601      	adds	r6, #1
 8002a52:	e7f2      	b.n	8002a3a <__libc_init_array+0x1e>
 8002a54:	080034bc 	.word	0x080034bc
 8002a58:	080034bc 	.word	0x080034bc
 8002a5c:	080034bc 	.word	0x080034bc
 8002a60:	080034c0 	.word	0x080034c0

08002a64 <memset>:
 8002a64:	4402      	add	r2, r0
 8002a66:	4603      	mov	r3, r0
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <memset+0xa>
 8002a6c:	4770      	bx	lr
 8002a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a72:	e7f9      	b.n	8002a68 <memset+0x4>

08002a74 <_puts_r>:
 8002a74:	b570      	push	{r4, r5, r6, lr}
 8002a76:	460e      	mov	r6, r1
 8002a78:	4605      	mov	r5, r0
 8002a7a:	b118      	cbz	r0, 8002a84 <_puts_r+0x10>
 8002a7c:	6983      	ldr	r3, [r0, #24]
 8002a7e:	b90b      	cbnz	r3, 8002a84 <_puts_r+0x10>
 8002a80:	f000 fa48 	bl	8002f14 <__sinit>
 8002a84:	69ab      	ldr	r3, [r5, #24]
 8002a86:	68ac      	ldr	r4, [r5, #8]
 8002a88:	b913      	cbnz	r3, 8002a90 <_puts_r+0x1c>
 8002a8a:	4628      	mov	r0, r5
 8002a8c:	f000 fa42 	bl	8002f14 <__sinit>
 8002a90:	4b2c      	ldr	r3, [pc, #176]	; (8002b44 <_puts_r+0xd0>)
 8002a92:	429c      	cmp	r4, r3
 8002a94:	d120      	bne.n	8002ad8 <_puts_r+0x64>
 8002a96:	686c      	ldr	r4, [r5, #4]
 8002a98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002a9a:	07db      	lsls	r3, r3, #31
 8002a9c:	d405      	bmi.n	8002aaa <_puts_r+0x36>
 8002a9e:	89a3      	ldrh	r3, [r4, #12]
 8002aa0:	0598      	lsls	r0, r3, #22
 8002aa2:	d402      	bmi.n	8002aaa <_puts_r+0x36>
 8002aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002aa6:	f000 fad3 	bl	8003050 <__retarget_lock_acquire_recursive>
 8002aaa:	89a3      	ldrh	r3, [r4, #12]
 8002aac:	0719      	lsls	r1, r3, #28
 8002aae:	d51d      	bpl.n	8002aec <_puts_r+0x78>
 8002ab0:	6923      	ldr	r3, [r4, #16]
 8002ab2:	b1db      	cbz	r3, 8002aec <_puts_r+0x78>
 8002ab4:	3e01      	subs	r6, #1
 8002ab6:	68a3      	ldr	r3, [r4, #8]
 8002ab8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002abc:	3b01      	subs	r3, #1
 8002abe:	60a3      	str	r3, [r4, #8]
 8002ac0:	bb39      	cbnz	r1, 8002b12 <_puts_r+0x9e>
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	da38      	bge.n	8002b38 <_puts_r+0xc4>
 8002ac6:	4622      	mov	r2, r4
 8002ac8:	210a      	movs	r1, #10
 8002aca:	4628      	mov	r0, r5
 8002acc:	f000 f848 	bl	8002b60 <__swbuf_r>
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d011      	beq.n	8002af8 <_puts_r+0x84>
 8002ad4:	250a      	movs	r5, #10
 8002ad6:	e011      	b.n	8002afc <_puts_r+0x88>
 8002ad8:	4b1b      	ldr	r3, [pc, #108]	; (8002b48 <_puts_r+0xd4>)
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d101      	bne.n	8002ae2 <_puts_r+0x6e>
 8002ade:	68ac      	ldr	r4, [r5, #8]
 8002ae0:	e7da      	b.n	8002a98 <_puts_r+0x24>
 8002ae2:	4b1a      	ldr	r3, [pc, #104]	; (8002b4c <_puts_r+0xd8>)
 8002ae4:	429c      	cmp	r4, r3
 8002ae6:	bf08      	it	eq
 8002ae8:	68ec      	ldreq	r4, [r5, #12]
 8002aea:	e7d5      	b.n	8002a98 <_puts_r+0x24>
 8002aec:	4621      	mov	r1, r4
 8002aee:	4628      	mov	r0, r5
 8002af0:	f000 f888 	bl	8002c04 <__swsetup_r>
 8002af4:	2800      	cmp	r0, #0
 8002af6:	d0dd      	beq.n	8002ab4 <_puts_r+0x40>
 8002af8:	f04f 35ff 	mov.w	r5, #4294967295
 8002afc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002afe:	07da      	lsls	r2, r3, #31
 8002b00:	d405      	bmi.n	8002b0e <_puts_r+0x9a>
 8002b02:	89a3      	ldrh	r3, [r4, #12]
 8002b04:	059b      	lsls	r3, r3, #22
 8002b06:	d402      	bmi.n	8002b0e <_puts_r+0x9a>
 8002b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002b0a:	f000 faa2 	bl	8003052 <__retarget_lock_release_recursive>
 8002b0e:	4628      	mov	r0, r5
 8002b10:	bd70      	pop	{r4, r5, r6, pc}
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	da04      	bge.n	8002b20 <_puts_r+0xac>
 8002b16:	69a2      	ldr	r2, [r4, #24]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	dc06      	bgt.n	8002b2a <_puts_r+0xb6>
 8002b1c:	290a      	cmp	r1, #10
 8002b1e:	d004      	beq.n	8002b2a <_puts_r+0xb6>
 8002b20:	6823      	ldr	r3, [r4, #0]
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	6022      	str	r2, [r4, #0]
 8002b26:	7019      	strb	r1, [r3, #0]
 8002b28:	e7c5      	b.n	8002ab6 <_puts_r+0x42>
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	4628      	mov	r0, r5
 8002b2e:	f000 f817 	bl	8002b60 <__swbuf_r>
 8002b32:	3001      	adds	r0, #1
 8002b34:	d1bf      	bne.n	8002ab6 <_puts_r+0x42>
 8002b36:	e7df      	b.n	8002af8 <_puts_r+0x84>
 8002b38:	6823      	ldr	r3, [r4, #0]
 8002b3a:	250a      	movs	r5, #10
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	6022      	str	r2, [r4, #0]
 8002b40:	701d      	strb	r5, [r3, #0]
 8002b42:	e7db      	b.n	8002afc <_puts_r+0x88>
 8002b44:	0800347c 	.word	0x0800347c
 8002b48:	0800349c 	.word	0x0800349c
 8002b4c:	0800345c 	.word	0x0800345c

08002b50 <puts>:
 8002b50:	4b02      	ldr	r3, [pc, #8]	; (8002b5c <puts+0xc>)
 8002b52:	4601      	mov	r1, r0
 8002b54:	6818      	ldr	r0, [r3, #0]
 8002b56:	f7ff bf8d 	b.w	8002a74 <_puts_r>
 8002b5a:	bf00      	nop
 8002b5c:	2000000c 	.word	0x2000000c

08002b60 <__swbuf_r>:
 8002b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b62:	460e      	mov	r6, r1
 8002b64:	4614      	mov	r4, r2
 8002b66:	4605      	mov	r5, r0
 8002b68:	b118      	cbz	r0, 8002b72 <__swbuf_r+0x12>
 8002b6a:	6983      	ldr	r3, [r0, #24]
 8002b6c:	b90b      	cbnz	r3, 8002b72 <__swbuf_r+0x12>
 8002b6e:	f000 f9d1 	bl	8002f14 <__sinit>
 8002b72:	4b21      	ldr	r3, [pc, #132]	; (8002bf8 <__swbuf_r+0x98>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	d12b      	bne.n	8002bd0 <__swbuf_r+0x70>
 8002b78:	686c      	ldr	r4, [r5, #4]
 8002b7a:	69a3      	ldr	r3, [r4, #24]
 8002b7c:	60a3      	str	r3, [r4, #8]
 8002b7e:	89a3      	ldrh	r3, [r4, #12]
 8002b80:	071a      	lsls	r2, r3, #28
 8002b82:	d52f      	bpl.n	8002be4 <__swbuf_r+0x84>
 8002b84:	6923      	ldr	r3, [r4, #16]
 8002b86:	b36b      	cbz	r3, 8002be4 <__swbuf_r+0x84>
 8002b88:	6923      	ldr	r3, [r4, #16]
 8002b8a:	6820      	ldr	r0, [r4, #0]
 8002b8c:	1ac0      	subs	r0, r0, r3
 8002b8e:	6963      	ldr	r3, [r4, #20]
 8002b90:	b2f6      	uxtb	r6, r6
 8002b92:	4283      	cmp	r3, r0
 8002b94:	4637      	mov	r7, r6
 8002b96:	dc04      	bgt.n	8002ba2 <__swbuf_r+0x42>
 8002b98:	4621      	mov	r1, r4
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f000 f926 	bl	8002dec <_fflush_r>
 8002ba0:	bb30      	cbnz	r0, 8002bf0 <__swbuf_r+0x90>
 8002ba2:	68a3      	ldr	r3, [r4, #8]
 8002ba4:	3b01      	subs	r3, #1
 8002ba6:	60a3      	str	r3, [r4, #8]
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	6022      	str	r2, [r4, #0]
 8002bae:	701e      	strb	r6, [r3, #0]
 8002bb0:	6963      	ldr	r3, [r4, #20]
 8002bb2:	3001      	adds	r0, #1
 8002bb4:	4283      	cmp	r3, r0
 8002bb6:	d004      	beq.n	8002bc2 <__swbuf_r+0x62>
 8002bb8:	89a3      	ldrh	r3, [r4, #12]
 8002bba:	07db      	lsls	r3, r3, #31
 8002bbc:	d506      	bpl.n	8002bcc <__swbuf_r+0x6c>
 8002bbe:	2e0a      	cmp	r6, #10
 8002bc0:	d104      	bne.n	8002bcc <__swbuf_r+0x6c>
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4628      	mov	r0, r5
 8002bc6:	f000 f911 	bl	8002dec <_fflush_r>
 8002bca:	b988      	cbnz	r0, 8002bf0 <__swbuf_r+0x90>
 8002bcc:	4638      	mov	r0, r7
 8002bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <__swbuf_r+0x9c>)
 8002bd2:	429c      	cmp	r4, r3
 8002bd4:	d101      	bne.n	8002bda <__swbuf_r+0x7a>
 8002bd6:	68ac      	ldr	r4, [r5, #8]
 8002bd8:	e7cf      	b.n	8002b7a <__swbuf_r+0x1a>
 8002bda:	4b09      	ldr	r3, [pc, #36]	; (8002c00 <__swbuf_r+0xa0>)
 8002bdc:	429c      	cmp	r4, r3
 8002bde:	bf08      	it	eq
 8002be0:	68ec      	ldreq	r4, [r5, #12]
 8002be2:	e7ca      	b.n	8002b7a <__swbuf_r+0x1a>
 8002be4:	4621      	mov	r1, r4
 8002be6:	4628      	mov	r0, r5
 8002be8:	f000 f80c 	bl	8002c04 <__swsetup_r>
 8002bec:	2800      	cmp	r0, #0
 8002bee:	d0cb      	beq.n	8002b88 <__swbuf_r+0x28>
 8002bf0:	f04f 37ff 	mov.w	r7, #4294967295
 8002bf4:	e7ea      	b.n	8002bcc <__swbuf_r+0x6c>
 8002bf6:	bf00      	nop
 8002bf8:	0800347c 	.word	0x0800347c
 8002bfc:	0800349c 	.word	0x0800349c
 8002c00:	0800345c 	.word	0x0800345c

08002c04 <__swsetup_r>:
 8002c04:	4b32      	ldr	r3, [pc, #200]	; (8002cd0 <__swsetup_r+0xcc>)
 8002c06:	b570      	push	{r4, r5, r6, lr}
 8002c08:	681d      	ldr	r5, [r3, #0]
 8002c0a:	4606      	mov	r6, r0
 8002c0c:	460c      	mov	r4, r1
 8002c0e:	b125      	cbz	r5, 8002c1a <__swsetup_r+0x16>
 8002c10:	69ab      	ldr	r3, [r5, #24]
 8002c12:	b913      	cbnz	r3, 8002c1a <__swsetup_r+0x16>
 8002c14:	4628      	mov	r0, r5
 8002c16:	f000 f97d 	bl	8002f14 <__sinit>
 8002c1a:	4b2e      	ldr	r3, [pc, #184]	; (8002cd4 <__swsetup_r+0xd0>)
 8002c1c:	429c      	cmp	r4, r3
 8002c1e:	d10f      	bne.n	8002c40 <__swsetup_r+0x3c>
 8002c20:	686c      	ldr	r4, [r5, #4]
 8002c22:	89a3      	ldrh	r3, [r4, #12]
 8002c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002c28:	0719      	lsls	r1, r3, #28
 8002c2a:	d42c      	bmi.n	8002c86 <__swsetup_r+0x82>
 8002c2c:	06dd      	lsls	r5, r3, #27
 8002c2e:	d411      	bmi.n	8002c54 <__swsetup_r+0x50>
 8002c30:	2309      	movs	r3, #9
 8002c32:	6033      	str	r3, [r6, #0]
 8002c34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002c38:	81a3      	strh	r3, [r4, #12]
 8002c3a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c3e:	e03e      	b.n	8002cbe <__swsetup_r+0xba>
 8002c40:	4b25      	ldr	r3, [pc, #148]	; (8002cd8 <__swsetup_r+0xd4>)
 8002c42:	429c      	cmp	r4, r3
 8002c44:	d101      	bne.n	8002c4a <__swsetup_r+0x46>
 8002c46:	68ac      	ldr	r4, [r5, #8]
 8002c48:	e7eb      	b.n	8002c22 <__swsetup_r+0x1e>
 8002c4a:	4b24      	ldr	r3, [pc, #144]	; (8002cdc <__swsetup_r+0xd8>)
 8002c4c:	429c      	cmp	r4, r3
 8002c4e:	bf08      	it	eq
 8002c50:	68ec      	ldreq	r4, [r5, #12]
 8002c52:	e7e6      	b.n	8002c22 <__swsetup_r+0x1e>
 8002c54:	0758      	lsls	r0, r3, #29
 8002c56:	d512      	bpl.n	8002c7e <__swsetup_r+0x7a>
 8002c58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c5a:	b141      	cbz	r1, 8002c6e <__swsetup_r+0x6a>
 8002c5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c60:	4299      	cmp	r1, r3
 8002c62:	d002      	beq.n	8002c6a <__swsetup_r+0x66>
 8002c64:	4630      	mov	r0, r6
 8002c66:	f000 fa59 	bl	800311c <_free_r>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	6363      	str	r3, [r4, #52]	; 0x34
 8002c6e:	89a3      	ldrh	r3, [r4, #12]
 8002c70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002c74:	81a3      	strh	r3, [r4, #12]
 8002c76:	2300      	movs	r3, #0
 8002c78:	6063      	str	r3, [r4, #4]
 8002c7a:	6923      	ldr	r3, [r4, #16]
 8002c7c:	6023      	str	r3, [r4, #0]
 8002c7e:	89a3      	ldrh	r3, [r4, #12]
 8002c80:	f043 0308 	orr.w	r3, r3, #8
 8002c84:	81a3      	strh	r3, [r4, #12]
 8002c86:	6923      	ldr	r3, [r4, #16]
 8002c88:	b94b      	cbnz	r3, 8002c9e <__swsetup_r+0x9a>
 8002c8a:	89a3      	ldrh	r3, [r4, #12]
 8002c8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002c90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c94:	d003      	beq.n	8002c9e <__swsetup_r+0x9a>
 8002c96:	4621      	mov	r1, r4
 8002c98:	4630      	mov	r0, r6
 8002c9a:	f000 f9ff 	bl	800309c <__smakebuf_r>
 8002c9e:	89a0      	ldrh	r0, [r4, #12]
 8002ca0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ca4:	f010 0301 	ands.w	r3, r0, #1
 8002ca8:	d00a      	beq.n	8002cc0 <__swsetup_r+0xbc>
 8002caa:	2300      	movs	r3, #0
 8002cac:	60a3      	str	r3, [r4, #8]
 8002cae:	6963      	ldr	r3, [r4, #20]
 8002cb0:	425b      	negs	r3, r3
 8002cb2:	61a3      	str	r3, [r4, #24]
 8002cb4:	6923      	ldr	r3, [r4, #16]
 8002cb6:	b943      	cbnz	r3, 8002cca <__swsetup_r+0xc6>
 8002cb8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002cbc:	d1ba      	bne.n	8002c34 <__swsetup_r+0x30>
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
 8002cc0:	0781      	lsls	r1, r0, #30
 8002cc2:	bf58      	it	pl
 8002cc4:	6963      	ldrpl	r3, [r4, #20]
 8002cc6:	60a3      	str	r3, [r4, #8]
 8002cc8:	e7f4      	b.n	8002cb4 <__swsetup_r+0xb0>
 8002cca:	2000      	movs	r0, #0
 8002ccc:	e7f7      	b.n	8002cbe <__swsetup_r+0xba>
 8002cce:	bf00      	nop
 8002cd0:	2000000c 	.word	0x2000000c
 8002cd4:	0800347c 	.word	0x0800347c
 8002cd8:	0800349c 	.word	0x0800349c
 8002cdc:	0800345c 	.word	0x0800345c

08002ce0 <__sflush_r>:
 8002ce0:	898a      	ldrh	r2, [r1, #12]
 8002ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ce6:	4605      	mov	r5, r0
 8002ce8:	0710      	lsls	r0, r2, #28
 8002cea:	460c      	mov	r4, r1
 8002cec:	d458      	bmi.n	8002da0 <__sflush_r+0xc0>
 8002cee:	684b      	ldr	r3, [r1, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dc05      	bgt.n	8002d00 <__sflush_r+0x20>
 8002cf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	dc02      	bgt.n	8002d00 <__sflush_r+0x20>
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d02:	2e00      	cmp	r6, #0
 8002d04:	d0f9      	beq.n	8002cfa <__sflush_r+0x1a>
 8002d06:	2300      	movs	r3, #0
 8002d08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002d0c:	682f      	ldr	r7, [r5, #0]
 8002d0e:	602b      	str	r3, [r5, #0]
 8002d10:	d032      	beq.n	8002d78 <__sflush_r+0x98>
 8002d12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d14:	89a3      	ldrh	r3, [r4, #12]
 8002d16:	075a      	lsls	r2, r3, #29
 8002d18:	d505      	bpl.n	8002d26 <__sflush_r+0x46>
 8002d1a:	6863      	ldr	r3, [r4, #4]
 8002d1c:	1ac0      	subs	r0, r0, r3
 8002d1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d20:	b10b      	cbz	r3, 8002d26 <__sflush_r+0x46>
 8002d22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002d24:	1ac0      	subs	r0, r0, r3
 8002d26:	2300      	movs	r3, #0
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002d2c:	6a21      	ldr	r1, [r4, #32]
 8002d2e:	4628      	mov	r0, r5
 8002d30:	47b0      	blx	r6
 8002d32:	1c43      	adds	r3, r0, #1
 8002d34:	89a3      	ldrh	r3, [r4, #12]
 8002d36:	d106      	bne.n	8002d46 <__sflush_r+0x66>
 8002d38:	6829      	ldr	r1, [r5, #0]
 8002d3a:	291d      	cmp	r1, #29
 8002d3c:	d82c      	bhi.n	8002d98 <__sflush_r+0xb8>
 8002d3e:	4a2a      	ldr	r2, [pc, #168]	; (8002de8 <__sflush_r+0x108>)
 8002d40:	40ca      	lsrs	r2, r1
 8002d42:	07d6      	lsls	r6, r2, #31
 8002d44:	d528      	bpl.n	8002d98 <__sflush_r+0xb8>
 8002d46:	2200      	movs	r2, #0
 8002d48:	6062      	str	r2, [r4, #4]
 8002d4a:	04d9      	lsls	r1, r3, #19
 8002d4c:	6922      	ldr	r2, [r4, #16]
 8002d4e:	6022      	str	r2, [r4, #0]
 8002d50:	d504      	bpl.n	8002d5c <__sflush_r+0x7c>
 8002d52:	1c42      	adds	r2, r0, #1
 8002d54:	d101      	bne.n	8002d5a <__sflush_r+0x7a>
 8002d56:	682b      	ldr	r3, [r5, #0]
 8002d58:	b903      	cbnz	r3, 8002d5c <__sflush_r+0x7c>
 8002d5a:	6560      	str	r0, [r4, #84]	; 0x54
 8002d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002d5e:	602f      	str	r7, [r5, #0]
 8002d60:	2900      	cmp	r1, #0
 8002d62:	d0ca      	beq.n	8002cfa <__sflush_r+0x1a>
 8002d64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002d68:	4299      	cmp	r1, r3
 8002d6a:	d002      	beq.n	8002d72 <__sflush_r+0x92>
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f000 f9d5 	bl	800311c <_free_r>
 8002d72:	2000      	movs	r0, #0
 8002d74:	6360      	str	r0, [r4, #52]	; 0x34
 8002d76:	e7c1      	b.n	8002cfc <__sflush_r+0x1c>
 8002d78:	6a21      	ldr	r1, [r4, #32]
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4628      	mov	r0, r5
 8002d7e:	47b0      	blx	r6
 8002d80:	1c41      	adds	r1, r0, #1
 8002d82:	d1c7      	bne.n	8002d14 <__sflush_r+0x34>
 8002d84:	682b      	ldr	r3, [r5, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0c4      	beq.n	8002d14 <__sflush_r+0x34>
 8002d8a:	2b1d      	cmp	r3, #29
 8002d8c:	d001      	beq.n	8002d92 <__sflush_r+0xb2>
 8002d8e:	2b16      	cmp	r3, #22
 8002d90:	d101      	bne.n	8002d96 <__sflush_r+0xb6>
 8002d92:	602f      	str	r7, [r5, #0]
 8002d94:	e7b1      	b.n	8002cfa <__sflush_r+0x1a>
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d9c:	81a3      	strh	r3, [r4, #12]
 8002d9e:	e7ad      	b.n	8002cfc <__sflush_r+0x1c>
 8002da0:	690f      	ldr	r7, [r1, #16]
 8002da2:	2f00      	cmp	r7, #0
 8002da4:	d0a9      	beq.n	8002cfa <__sflush_r+0x1a>
 8002da6:	0793      	lsls	r3, r2, #30
 8002da8:	680e      	ldr	r6, [r1, #0]
 8002daa:	bf08      	it	eq
 8002dac:	694b      	ldreq	r3, [r1, #20]
 8002dae:	600f      	str	r7, [r1, #0]
 8002db0:	bf18      	it	ne
 8002db2:	2300      	movne	r3, #0
 8002db4:	eba6 0807 	sub.w	r8, r6, r7
 8002db8:	608b      	str	r3, [r1, #8]
 8002dba:	f1b8 0f00 	cmp.w	r8, #0
 8002dbe:	dd9c      	ble.n	8002cfa <__sflush_r+0x1a>
 8002dc0:	6a21      	ldr	r1, [r4, #32]
 8002dc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002dc4:	4643      	mov	r3, r8
 8002dc6:	463a      	mov	r2, r7
 8002dc8:	4628      	mov	r0, r5
 8002dca:	47b0      	blx	r6
 8002dcc:	2800      	cmp	r0, #0
 8002dce:	dc06      	bgt.n	8002dde <__sflush_r+0xfe>
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd6:	81a3      	strh	r3, [r4, #12]
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	e78e      	b.n	8002cfc <__sflush_r+0x1c>
 8002dde:	4407      	add	r7, r0
 8002de0:	eba8 0800 	sub.w	r8, r8, r0
 8002de4:	e7e9      	b.n	8002dba <__sflush_r+0xda>
 8002de6:	bf00      	nop
 8002de8:	20400001 	.word	0x20400001

08002dec <_fflush_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	690b      	ldr	r3, [r1, #16]
 8002df0:	4605      	mov	r5, r0
 8002df2:	460c      	mov	r4, r1
 8002df4:	b913      	cbnz	r3, 8002dfc <_fflush_r+0x10>
 8002df6:	2500      	movs	r5, #0
 8002df8:	4628      	mov	r0, r5
 8002dfa:	bd38      	pop	{r3, r4, r5, pc}
 8002dfc:	b118      	cbz	r0, 8002e06 <_fflush_r+0x1a>
 8002dfe:	6983      	ldr	r3, [r0, #24]
 8002e00:	b90b      	cbnz	r3, 8002e06 <_fflush_r+0x1a>
 8002e02:	f000 f887 	bl	8002f14 <__sinit>
 8002e06:	4b14      	ldr	r3, [pc, #80]	; (8002e58 <_fflush_r+0x6c>)
 8002e08:	429c      	cmp	r4, r3
 8002e0a:	d11b      	bne.n	8002e44 <_fflush_r+0x58>
 8002e0c:	686c      	ldr	r4, [r5, #4]
 8002e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0ef      	beq.n	8002df6 <_fflush_r+0xa>
 8002e16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002e18:	07d0      	lsls	r0, r2, #31
 8002e1a:	d404      	bmi.n	8002e26 <_fflush_r+0x3a>
 8002e1c:	0599      	lsls	r1, r3, #22
 8002e1e:	d402      	bmi.n	8002e26 <_fflush_r+0x3a>
 8002e20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e22:	f000 f915 	bl	8003050 <__retarget_lock_acquire_recursive>
 8002e26:	4628      	mov	r0, r5
 8002e28:	4621      	mov	r1, r4
 8002e2a:	f7ff ff59 	bl	8002ce0 <__sflush_r>
 8002e2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e30:	07da      	lsls	r2, r3, #31
 8002e32:	4605      	mov	r5, r0
 8002e34:	d4e0      	bmi.n	8002df8 <_fflush_r+0xc>
 8002e36:	89a3      	ldrh	r3, [r4, #12]
 8002e38:	059b      	lsls	r3, r3, #22
 8002e3a:	d4dd      	bmi.n	8002df8 <_fflush_r+0xc>
 8002e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e3e:	f000 f908 	bl	8003052 <__retarget_lock_release_recursive>
 8002e42:	e7d9      	b.n	8002df8 <_fflush_r+0xc>
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <_fflush_r+0x70>)
 8002e46:	429c      	cmp	r4, r3
 8002e48:	d101      	bne.n	8002e4e <_fflush_r+0x62>
 8002e4a:	68ac      	ldr	r4, [r5, #8]
 8002e4c:	e7df      	b.n	8002e0e <_fflush_r+0x22>
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <_fflush_r+0x74>)
 8002e50:	429c      	cmp	r4, r3
 8002e52:	bf08      	it	eq
 8002e54:	68ec      	ldreq	r4, [r5, #12]
 8002e56:	e7da      	b.n	8002e0e <_fflush_r+0x22>
 8002e58:	0800347c 	.word	0x0800347c
 8002e5c:	0800349c 	.word	0x0800349c
 8002e60:	0800345c 	.word	0x0800345c

08002e64 <std>:
 8002e64:	2300      	movs	r3, #0
 8002e66:	b510      	push	{r4, lr}
 8002e68:	4604      	mov	r4, r0
 8002e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8002e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e72:	6083      	str	r3, [r0, #8]
 8002e74:	8181      	strh	r1, [r0, #12]
 8002e76:	6643      	str	r3, [r0, #100]	; 0x64
 8002e78:	81c2      	strh	r2, [r0, #14]
 8002e7a:	6183      	str	r3, [r0, #24]
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	2208      	movs	r2, #8
 8002e80:	305c      	adds	r0, #92	; 0x5c
 8002e82:	f7ff fdef 	bl	8002a64 <memset>
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <std+0x38>)
 8002e88:	6263      	str	r3, [r4, #36]	; 0x24
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <std+0x3c>)
 8002e8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <std+0x40>)
 8002e90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002e92:	4b05      	ldr	r3, [pc, #20]	; (8002ea8 <std+0x44>)
 8002e94:	6224      	str	r4, [r4, #32]
 8002e96:	6323      	str	r3, [r4, #48]	; 0x30
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	bf00      	nop
 8002e9c:	08003291 	.word	0x08003291
 8002ea0:	080032b3 	.word	0x080032b3
 8002ea4:	080032eb 	.word	0x080032eb
 8002ea8:	0800330f 	.word	0x0800330f

08002eac <_cleanup_r>:
 8002eac:	4901      	ldr	r1, [pc, #4]	; (8002eb4 <_cleanup_r+0x8>)
 8002eae:	f000 b8af 	b.w	8003010 <_fwalk_reent>
 8002eb2:	bf00      	nop
 8002eb4:	08002ded 	.word	0x08002ded

08002eb8 <__sfmoreglue>:
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	1e4a      	subs	r2, r1, #1
 8002ebc:	2568      	movs	r5, #104	; 0x68
 8002ebe:	4355      	muls	r5, r2
 8002ec0:	460e      	mov	r6, r1
 8002ec2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002ec6:	f000 f979 	bl	80031bc <_malloc_r>
 8002eca:	4604      	mov	r4, r0
 8002ecc:	b140      	cbz	r0, 8002ee0 <__sfmoreglue+0x28>
 8002ece:	2100      	movs	r1, #0
 8002ed0:	e9c0 1600 	strd	r1, r6, [r0]
 8002ed4:	300c      	adds	r0, #12
 8002ed6:	60a0      	str	r0, [r4, #8]
 8002ed8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002edc:	f7ff fdc2 	bl	8002a64 <memset>
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	bd70      	pop	{r4, r5, r6, pc}

08002ee4 <__sfp_lock_acquire>:
 8002ee4:	4801      	ldr	r0, [pc, #4]	; (8002eec <__sfp_lock_acquire+0x8>)
 8002ee6:	f000 b8b3 	b.w	8003050 <__retarget_lock_acquire_recursive>
 8002eea:	bf00      	nop
 8002eec:	20000440 	.word	0x20000440

08002ef0 <__sfp_lock_release>:
 8002ef0:	4801      	ldr	r0, [pc, #4]	; (8002ef8 <__sfp_lock_release+0x8>)
 8002ef2:	f000 b8ae 	b.w	8003052 <__retarget_lock_release_recursive>
 8002ef6:	bf00      	nop
 8002ef8:	20000440 	.word	0x20000440

08002efc <__sinit_lock_acquire>:
 8002efc:	4801      	ldr	r0, [pc, #4]	; (8002f04 <__sinit_lock_acquire+0x8>)
 8002efe:	f000 b8a7 	b.w	8003050 <__retarget_lock_acquire_recursive>
 8002f02:	bf00      	nop
 8002f04:	2000043b 	.word	0x2000043b

08002f08 <__sinit_lock_release>:
 8002f08:	4801      	ldr	r0, [pc, #4]	; (8002f10 <__sinit_lock_release+0x8>)
 8002f0a:	f000 b8a2 	b.w	8003052 <__retarget_lock_release_recursive>
 8002f0e:	bf00      	nop
 8002f10:	2000043b 	.word	0x2000043b

08002f14 <__sinit>:
 8002f14:	b510      	push	{r4, lr}
 8002f16:	4604      	mov	r4, r0
 8002f18:	f7ff fff0 	bl	8002efc <__sinit_lock_acquire>
 8002f1c:	69a3      	ldr	r3, [r4, #24]
 8002f1e:	b11b      	cbz	r3, 8002f28 <__sinit+0x14>
 8002f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f24:	f7ff bff0 	b.w	8002f08 <__sinit_lock_release>
 8002f28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002f2c:	6523      	str	r3, [r4, #80]	; 0x50
 8002f2e:	4b13      	ldr	r3, [pc, #76]	; (8002f7c <__sinit+0x68>)
 8002f30:	4a13      	ldr	r2, [pc, #76]	; (8002f80 <__sinit+0x6c>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	62a2      	str	r2, [r4, #40]	; 0x28
 8002f36:	42a3      	cmp	r3, r4
 8002f38:	bf04      	itt	eq
 8002f3a:	2301      	moveq	r3, #1
 8002f3c:	61a3      	streq	r3, [r4, #24]
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f000 f820 	bl	8002f84 <__sfp>
 8002f44:	6060      	str	r0, [r4, #4]
 8002f46:	4620      	mov	r0, r4
 8002f48:	f000 f81c 	bl	8002f84 <__sfp>
 8002f4c:	60a0      	str	r0, [r4, #8]
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f000 f818 	bl	8002f84 <__sfp>
 8002f54:	2200      	movs	r2, #0
 8002f56:	60e0      	str	r0, [r4, #12]
 8002f58:	2104      	movs	r1, #4
 8002f5a:	6860      	ldr	r0, [r4, #4]
 8002f5c:	f7ff ff82 	bl	8002e64 <std>
 8002f60:	68a0      	ldr	r0, [r4, #8]
 8002f62:	2201      	movs	r2, #1
 8002f64:	2109      	movs	r1, #9
 8002f66:	f7ff ff7d 	bl	8002e64 <std>
 8002f6a:	68e0      	ldr	r0, [r4, #12]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	2112      	movs	r1, #18
 8002f70:	f7ff ff78 	bl	8002e64 <std>
 8002f74:	2301      	movs	r3, #1
 8002f76:	61a3      	str	r3, [r4, #24]
 8002f78:	e7d2      	b.n	8002f20 <__sinit+0xc>
 8002f7a:	bf00      	nop
 8002f7c:	08003458 	.word	0x08003458
 8002f80:	08002ead 	.word	0x08002ead

08002f84 <__sfp>:
 8002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f86:	4607      	mov	r7, r0
 8002f88:	f7ff ffac 	bl	8002ee4 <__sfp_lock_acquire>
 8002f8c:	4b1e      	ldr	r3, [pc, #120]	; (8003008 <__sfp+0x84>)
 8002f8e:	681e      	ldr	r6, [r3, #0]
 8002f90:	69b3      	ldr	r3, [r6, #24]
 8002f92:	b913      	cbnz	r3, 8002f9a <__sfp+0x16>
 8002f94:	4630      	mov	r0, r6
 8002f96:	f7ff ffbd 	bl	8002f14 <__sinit>
 8002f9a:	3648      	adds	r6, #72	; 0x48
 8002f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	d503      	bpl.n	8002fac <__sfp+0x28>
 8002fa4:	6833      	ldr	r3, [r6, #0]
 8002fa6:	b30b      	cbz	r3, 8002fec <__sfp+0x68>
 8002fa8:	6836      	ldr	r6, [r6, #0]
 8002faa:	e7f7      	b.n	8002f9c <__sfp+0x18>
 8002fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002fb0:	b9d5      	cbnz	r5, 8002fe8 <__sfp+0x64>
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <__sfp+0x88>)
 8002fb4:	60e3      	str	r3, [r4, #12]
 8002fb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002fba:	6665      	str	r5, [r4, #100]	; 0x64
 8002fbc:	f000 f847 	bl	800304e <__retarget_lock_init_recursive>
 8002fc0:	f7ff ff96 	bl	8002ef0 <__sfp_lock_release>
 8002fc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002fc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002fcc:	6025      	str	r5, [r4, #0]
 8002fce:	61a5      	str	r5, [r4, #24]
 8002fd0:	2208      	movs	r2, #8
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002fd8:	f7ff fd44 	bl	8002a64 <memset>
 8002fdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002fe0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe8:	3468      	adds	r4, #104	; 0x68
 8002fea:	e7d9      	b.n	8002fa0 <__sfp+0x1c>
 8002fec:	2104      	movs	r1, #4
 8002fee:	4638      	mov	r0, r7
 8002ff0:	f7ff ff62 	bl	8002eb8 <__sfmoreglue>
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	6030      	str	r0, [r6, #0]
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d1d5      	bne.n	8002fa8 <__sfp+0x24>
 8002ffc:	f7ff ff78 	bl	8002ef0 <__sfp_lock_release>
 8003000:	230c      	movs	r3, #12
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	e7ee      	b.n	8002fe4 <__sfp+0x60>
 8003006:	bf00      	nop
 8003008:	08003458 	.word	0x08003458
 800300c:	ffff0001 	.word	0xffff0001

08003010 <_fwalk_reent>:
 8003010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003014:	4606      	mov	r6, r0
 8003016:	4688      	mov	r8, r1
 8003018:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800301c:	2700      	movs	r7, #0
 800301e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003022:	f1b9 0901 	subs.w	r9, r9, #1
 8003026:	d505      	bpl.n	8003034 <_fwalk_reent+0x24>
 8003028:	6824      	ldr	r4, [r4, #0]
 800302a:	2c00      	cmp	r4, #0
 800302c:	d1f7      	bne.n	800301e <_fwalk_reent+0xe>
 800302e:	4638      	mov	r0, r7
 8003030:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003034:	89ab      	ldrh	r3, [r5, #12]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d907      	bls.n	800304a <_fwalk_reent+0x3a>
 800303a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800303e:	3301      	adds	r3, #1
 8003040:	d003      	beq.n	800304a <_fwalk_reent+0x3a>
 8003042:	4629      	mov	r1, r5
 8003044:	4630      	mov	r0, r6
 8003046:	47c0      	blx	r8
 8003048:	4307      	orrs	r7, r0
 800304a:	3568      	adds	r5, #104	; 0x68
 800304c:	e7e9      	b.n	8003022 <_fwalk_reent+0x12>

0800304e <__retarget_lock_init_recursive>:
 800304e:	4770      	bx	lr

08003050 <__retarget_lock_acquire_recursive>:
 8003050:	4770      	bx	lr

08003052 <__retarget_lock_release_recursive>:
 8003052:	4770      	bx	lr

08003054 <__swhatbuf_r>:
 8003054:	b570      	push	{r4, r5, r6, lr}
 8003056:	460e      	mov	r6, r1
 8003058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800305c:	2900      	cmp	r1, #0
 800305e:	b096      	sub	sp, #88	; 0x58
 8003060:	4614      	mov	r4, r2
 8003062:	461d      	mov	r5, r3
 8003064:	da07      	bge.n	8003076 <__swhatbuf_r+0x22>
 8003066:	2300      	movs	r3, #0
 8003068:	602b      	str	r3, [r5, #0]
 800306a:	89b3      	ldrh	r3, [r6, #12]
 800306c:	061a      	lsls	r2, r3, #24
 800306e:	d410      	bmi.n	8003092 <__swhatbuf_r+0x3e>
 8003070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003074:	e00e      	b.n	8003094 <__swhatbuf_r+0x40>
 8003076:	466a      	mov	r2, sp
 8003078:	f000 f970 	bl	800335c <_fstat_r>
 800307c:	2800      	cmp	r0, #0
 800307e:	dbf2      	blt.n	8003066 <__swhatbuf_r+0x12>
 8003080:	9a01      	ldr	r2, [sp, #4]
 8003082:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003086:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800308a:	425a      	negs	r2, r3
 800308c:	415a      	adcs	r2, r3
 800308e:	602a      	str	r2, [r5, #0]
 8003090:	e7ee      	b.n	8003070 <__swhatbuf_r+0x1c>
 8003092:	2340      	movs	r3, #64	; 0x40
 8003094:	2000      	movs	r0, #0
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	b016      	add	sp, #88	; 0x58
 800309a:	bd70      	pop	{r4, r5, r6, pc}

0800309c <__smakebuf_r>:
 800309c:	898b      	ldrh	r3, [r1, #12]
 800309e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80030a0:	079d      	lsls	r5, r3, #30
 80030a2:	4606      	mov	r6, r0
 80030a4:	460c      	mov	r4, r1
 80030a6:	d507      	bpl.n	80030b8 <__smakebuf_r+0x1c>
 80030a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	6123      	str	r3, [r4, #16]
 80030b0:	2301      	movs	r3, #1
 80030b2:	6163      	str	r3, [r4, #20]
 80030b4:	b002      	add	sp, #8
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	ab01      	add	r3, sp, #4
 80030ba:	466a      	mov	r2, sp
 80030bc:	f7ff ffca 	bl	8003054 <__swhatbuf_r>
 80030c0:	9900      	ldr	r1, [sp, #0]
 80030c2:	4605      	mov	r5, r0
 80030c4:	4630      	mov	r0, r6
 80030c6:	f000 f879 	bl	80031bc <_malloc_r>
 80030ca:	b948      	cbnz	r0, 80030e0 <__smakebuf_r+0x44>
 80030cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030d0:	059a      	lsls	r2, r3, #22
 80030d2:	d4ef      	bmi.n	80030b4 <__smakebuf_r+0x18>
 80030d4:	f023 0303 	bic.w	r3, r3, #3
 80030d8:	f043 0302 	orr.w	r3, r3, #2
 80030dc:	81a3      	strh	r3, [r4, #12]
 80030de:	e7e3      	b.n	80030a8 <__smakebuf_r+0xc>
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <__smakebuf_r+0x7c>)
 80030e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80030e4:	89a3      	ldrh	r3, [r4, #12]
 80030e6:	6020      	str	r0, [r4, #0]
 80030e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ec:	81a3      	strh	r3, [r4, #12]
 80030ee:	9b00      	ldr	r3, [sp, #0]
 80030f0:	6163      	str	r3, [r4, #20]
 80030f2:	9b01      	ldr	r3, [sp, #4]
 80030f4:	6120      	str	r0, [r4, #16]
 80030f6:	b15b      	cbz	r3, 8003110 <__smakebuf_r+0x74>
 80030f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030fc:	4630      	mov	r0, r6
 80030fe:	f000 f93f 	bl	8003380 <_isatty_r>
 8003102:	b128      	cbz	r0, 8003110 <__smakebuf_r+0x74>
 8003104:	89a3      	ldrh	r3, [r4, #12]
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	89a0      	ldrh	r0, [r4, #12]
 8003112:	4305      	orrs	r5, r0
 8003114:	81a5      	strh	r5, [r4, #12]
 8003116:	e7cd      	b.n	80030b4 <__smakebuf_r+0x18>
 8003118:	08002ead 	.word	0x08002ead

0800311c <_free_r>:
 800311c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800311e:	2900      	cmp	r1, #0
 8003120:	d048      	beq.n	80031b4 <_free_r+0x98>
 8003122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003126:	9001      	str	r0, [sp, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	f1a1 0404 	sub.w	r4, r1, #4
 800312e:	bfb8      	it	lt
 8003130:	18e4      	addlt	r4, r4, r3
 8003132:	f000 f947 	bl	80033c4 <__malloc_lock>
 8003136:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <_free_r+0x9c>)
 8003138:	9801      	ldr	r0, [sp, #4]
 800313a:	6813      	ldr	r3, [r2, #0]
 800313c:	4615      	mov	r5, r2
 800313e:	b933      	cbnz	r3, 800314e <_free_r+0x32>
 8003140:	6063      	str	r3, [r4, #4]
 8003142:	6014      	str	r4, [r2, #0]
 8003144:	b003      	add	sp, #12
 8003146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800314a:	f000 b941 	b.w	80033d0 <__malloc_unlock>
 800314e:	42a3      	cmp	r3, r4
 8003150:	d90b      	bls.n	800316a <_free_r+0x4e>
 8003152:	6821      	ldr	r1, [r4, #0]
 8003154:	1862      	adds	r2, r4, r1
 8003156:	4293      	cmp	r3, r2
 8003158:	bf04      	itt	eq
 800315a:	681a      	ldreq	r2, [r3, #0]
 800315c:	685b      	ldreq	r3, [r3, #4]
 800315e:	6063      	str	r3, [r4, #4]
 8003160:	bf04      	itt	eq
 8003162:	1852      	addeq	r2, r2, r1
 8003164:	6022      	streq	r2, [r4, #0]
 8003166:	602c      	str	r4, [r5, #0]
 8003168:	e7ec      	b.n	8003144 <_free_r+0x28>
 800316a:	461a      	mov	r2, r3
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	b10b      	cbz	r3, 8003174 <_free_r+0x58>
 8003170:	42a3      	cmp	r3, r4
 8003172:	d9fa      	bls.n	800316a <_free_r+0x4e>
 8003174:	6811      	ldr	r1, [r2, #0]
 8003176:	1855      	adds	r5, r2, r1
 8003178:	42a5      	cmp	r5, r4
 800317a:	d10b      	bne.n	8003194 <_free_r+0x78>
 800317c:	6824      	ldr	r4, [r4, #0]
 800317e:	4421      	add	r1, r4
 8003180:	1854      	adds	r4, r2, r1
 8003182:	42a3      	cmp	r3, r4
 8003184:	6011      	str	r1, [r2, #0]
 8003186:	d1dd      	bne.n	8003144 <_free_r+0x28>
 8003188:	681c      	ldr	r4, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	6053      	str	r3, [r2, #4]
 800318e:	4421      	add	r1, r4
 8003190:	6011      	str	r1, [r2, #0]
 8003192:	e7d7      	b.n	8003144 <_free_r+0x28>
 8003194:	d902      	bls.n	800319c <_free_r+0x80>
 8003196:	230c      	movs	r3, #12
 8003198:	6003      	str	r3, [r0, #0]
 800319a:	e7d3      	b.n	8003144 <_free_r+0x28>
 800319c:	6825      	ldr	r5, [r4, #0]
 800319e:	1961      	adds	r1, r4, r5
 80031a0:	428b      	cmp	r3, r1
 80031a2:	bf04      	itt	eq
 80031a4:	6819      	ldreq	r1, [r3, #0]
 80031a6:	685b      	ldreq	r3, [r3, #4]
 80031a8:	6063      	str	r3, [r4, #4]
 80031aa:	bf04      	itt	eq
 80031ac:	1949      	addeq	r1, r1, r5
 80031ae:	6021      	streq	r1, [r4, #0]
 80031b0:	6054      	str	r4, [r2, #4]
 80031b2:	e7c7      	b.n	8003144 <_free_r+0x28>
 80031b4:	b003      	add	sp, #12
 80031b6:	bd30      	pop	{r4, r5, pc}
 80031b8:	20000090 	.word	0x20000090

080031bc <_malloc_r>:
 80031bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031be:	1ccd      	adds	r5, r1, #3
 80031c0:	f025 0503 	bic.w	r5, r5, #3
 80031c4:	3508      	adds	r5, #8
 80031c6:	2d0c      	cmp	r5, #12
 80031c8:	bf38      	it	cc
 80031ca:	250c      	movcc	r5, #12
 80031cc:	2d00      	cmp	r5, #0
 80031ce:	4606      	mov	r6, r0
 80031d0:	db01      	blt.n	80031d6 <_malloc_r+0x1a>
 80031d2:	42a9      	cmp	r1, r5
 80031d4:	d903      	bls.n	80031de <_malloc_r+0x22>
 80031d6:	230c      	movs	r3, #12
 80031d8:	6033      	str	r3, [r6, #0]
 80031da:	2000      	movs	r0, #0
 80031dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031de:	f000 f8f1 	bl	80033c4 <__malloc_lock>
 80031e2:	4921      	ldr	r1, [pc, #132]	; (8003268 <_malloc_r+0xac>)
 80031e4:	680a      	ldr	r2, [r1, #0]
 80031e6:	4614      	mov	r4, r2
 80031e8:	b99c      	cbnz	r4, 8003212 <_malloc_r+0x56>
 80031ea:	4f20      	ldr	r7, [pc, #128]	; (800326c <_malloc_r+0xb0>)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	b923      	cbnz	r3, 80031fa <_malloc_r+0x3e>
 80031f0:	4621      	mov	r1, r4
 80031f2:	4630      	mov	r0, r6
 80031f4:	f000 f83c 	bl	8003270 <_sbrk_r>
 80031f8:	6038      	str	r0, [r7, #0]
 80031fa:	4629      	mov	r1, r5
 80031fc:	4630      	mov	r0, r6
 80031fe:	f000 f837 	bl	8003270 <_sbrk_r>
 8003202:	1c43      	adds	r3, r0, #1
 8003204:	d123      	bne.n	800324e <_malloc_r+0x92>
 8003206:	230c      	movs	r3, #12
 8003208:	6033      	str	r3, [r6, #0]
 800320a:	4630      	mov	r0, r6
 800320c:	f000 f8e0 	bl	80033d0 <__malloc_unlock>
 8003210:	e7e3      	b.n	80031da <_malloc_r+0x1e>
 8003212:	6823      	ldr	r3, [r4, #0]
 8003214:	1b5b      	subs	r3, r3, r5
 8003216:	d417      	bmi.n	8003248 <_malloc_r+0x8c>
 8003218:	2b0b      	cmp	r3, #11
 800321a:	d903      	bls.n	8003224 <_malloc_r+0x68>
 800321c:	6023      	str	r3, [r4, #0]
 800321e:	441c      	add	r4, r3
 8003220:	6025      	str	r5, [r4, #0]
 8003222:	e004      	b.n	800322e <_malloc_r+0x72>
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	42a2      	cmp	r2, r4
 8003228:	bf0c      	ite	eq
 800322a:	600b      	streq	r3, [r1, #0]
 800322c:	6053      	strne	r3, [r2, #4]
 800322e:	4630      	mov	r0, r6
 8003230:	f000 f8ce 	bl	80033d0 <__malloc_unlock>
 8003234:	f104 000b 	add.w	r0, r4, #11
 8003238:	1d23      	adds	r3, r4, #4
 800323a:	f020 0007 	bic.w	r0, r0, #7
 800323e:	1ac2      	subs	r2, r0, r3
 8003240:	d0cc      	beq.n	80031dc <_malloc_r+0x20>
 8003242:	1a1b      	subs	r3, r3, r0
 8003244:	50a3      	str	r3, [r4, r2]
 8003246:	e7c9      	b.n	80031dc <_malloc_r+0x20>
 8003248:	4622      	mov	r2, r4
 800324a:	6864      	ldr	r4, [r4, #4]
 800324c:	e7cc      	b.n	80031e8 <_malloc_r+0x2c>
 800324e:	1cc4      	adds	r4, r0, #3
 8003250:	f024 0403 	bic.w	r4, r4, #3
 8003254:	42a0      	cmp	r0, r4
 8003256:	d0e3      	beq.n	8003220 <_malloc_r+0x64>
 8003258:	1a21      	subs	r1, r4, r0
 800325a:	4630      	mov	r0, r6
 800325c:	f000 f808 	bl	8003270 <_sbrk_r>
 8003260:	3001      	adds	r0, #1
 8003262:	d1dd      	bne.n	8003220 <_malloc_r+0x64>
 8003264:	e7cf      	b.n	8003206 <_malloc_r+0x4a>
 8003266:	bf00      	nop
 8003268:	20000090 	.word	0x20000090
 800326c:	20000094 	.word	0x20000094

08003270 <_sbrk_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	4d06      	ldr	r5, [pc, #24]	; (800328c <_sbrk_r+0x1c>)
 8003274:	2300      	movs	r3, #0
 8003276:	4604      	mov	r4, r0
 8003278:	4608      	mov	r0, r1
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f7fd faee 	bl	800085c <_sbrk>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d102      	bne.n	800328a <_sbrk_r+0x1a>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b103      	cbz	r3, 800328a <_sbrk_r+0x1a>
 8003288:	6023      	str	r3, [r4, #0]
 800328a:	bd38      	pop	{r3, r4, r5, pc}
 800328c:	20000444 	.word	0x20000444

08003290 <__sread>:
 8003290:	b510      	push	{r4, lr}
 8003292:	460c      	mov	r4, r1
 8003294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003298:	f000 f8a0 	bl	80033dc <_read_r>
 800329c:	2800      	cmp	r0, #0
 800329e:	bfab      	itete	ge
 80032a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032a2:	89a3      	ldrhlt	r3, [r4, #12]
 80032a4:	181b      	addge	r3, r3, r0
 80032a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032aa:	bfac      	ite	ge
 80032ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80032ae:	81a3      	strhlt	r3, [r4, #12]
 80032b0:	bd10      	pop	{r4, pc}

080032b2 <__swrite>:
 80032b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b6:	461f      	mov	r7, r3
 80032b8:	898b      	ldrh	r3, [r1, #12]
 80032ba:	05db      	lsls	r3, r3, #23
 80032bc:	4605      	mov	r5, r0
 80032be:	460c      	mov	r4, r1
 80032c0:	4616      	mov	r6, r2
 80032c2:	d505      	bpl.n	80032d0 <__swrite+0x1e>
 80032c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c8:	2302      	movs	r3, #2
 80032ca:	2200      	movs	r2, #0
 80032cc:	f000 f868 	bl	80033a0 <_lseek_r>
 80032d0:	89a3      	ldrh	r3, [r4, #12]
 80032d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80032d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032da:	81a3      	strh	r3, [r4, #12]
 80032dc:	4632      	mov	r2, r6
 80032de:	463b      	mov	r3, r7
 80032e0:	4628      	mov	r0, r5
 80032e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032e6:	f000 b817 	b.w	8003318 <_write_r>

080032ea <__sseek>:
 80032ea:	b510      	push	{r4, lr}
 80032ec:	460c      	mov	r4, r1
 80032ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f2:	f000 f855 	bl	80033a0 <_lseek_r>
 80032f6:	1c43      	adds	r3, r0, #1
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	bf15      	itete	ne
 80032fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80032fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003302:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003306:	81a3      	strheq	r3, [r4, #12]
 8003308:	bf18      	it	ne
 800330a:	81a3      	strhne	r3, [r4, #12]
 800330c:	bd10      	pop	{r4, pc}

0800330e <__sclose>:
 800330e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003312:	f000 b813 	b.w	800333c <_close_r>
	...

08003318 <_write_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	4d07      	ldr	r5, [pc, #28]	; (8003338 <_write_r+0x20>)
 800331c:	4604      	mov	r4, r0
 800331e:	4608      	mov	r0, r1
 8003320:	4611      	mov	r1, r2
 8003322:	2200      	movs	r2, #0
 8003324:	602a      	str	r2, [r5, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	f7fc ff75 	bl	8000216 <_write>
 800332c:	1c43      	adds	r3, r0, #1
 800332e:	d102      	bne.n	8003336 <_write_r+0x1e>
 8003330:	682b      	ldr	r3, [r5, #0]
 8003332:	b103      	cbz	r3, 8003336 <_write_r+0x1e>
 8003334:	6023      	str	r3, [r4, #0]
 8003336:	bd38      	pop	{r3, r4, r5, pc}
 8003338:	20000444 	.word	0x20000444

0800333c <_close_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4d06      	ldr	r5, [pc, #24]	; (8003358 <_close_r+0x1c>)
 8003340:	2300      	movs	r3, #0
 8003342:	4604      	mov	r4, r0
 8003344:	4608      	mov	r0, r1
 8003346:	602b      	str	r3, [r5, #0]
 8003348:	f7fd fa53 	bl	80007f2 <_close>
 800334c:	1c43      	adds	r3, r0, #1
 800334e:	d102      	bne.n	8003356 <_close_r+0x1a>
 8003350:	682b      	ldr	r3, [r5, #0]
 8003352:	b103      	cbz	r3, 8003356 <_close_r+0x1a>
 8003354:	6023      	str	r3, [r4, #0]
 8003356:	bd38      	pop	{r3, r4, r5, pc}
 8003358:	20000444 	.word	0x20000444

0800335c <_fstat_r>:
 800335c:	b538      	push	{r3, r4, r5, lr}
 800335e:	4d07      	ldr	r5, [pc, #28]	; (800337c <_fstat_r+0x20>)
 8003360:	2300      	movs	r3, #0
 8003362:	4604      	mov	r4, r0
 8003364:	4608      	mov	r0, r1
 8003366:	4611      	mov	r1, r2
 8003368:	602b      	str	r3, [r5, #0]
 800336a:	f7fd fa4e 	bl	800080a <_fstat>
 800336e:	1c43      	adds	r3, r0, #1
 8003370:	d102      	bne.n	8003378 <_fstat_r+0x1c>
 8003372:	682b      	ldr	r3, [r5, #0]
 8003374:	b103      	cbz	r3, 8003378 <_fstat_r+0x1c>
 8003376:	6023      	str	r3, [r4, #0]
 8003378:	bd38      	pop	{r3, r4, r5, pc}
 800337a:	bf00      	nop
 800337c:	20000444 	.word	0x20000444

08003380 <_isatty_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	4d06      	ldr	r5, [pc, #24]	; (800339c <_isatty_r+0x1c>)
 8003384:	2300      	movs	r3, #0
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	602b      	str	r3, [r5, #0]
 800338c:	f7fd fa4d 	bl	800082a <_isatty>
 8003390:	1c43      	adds	r3, r0, #1
 8003392:	d102      	bne.n	800339a <_isatty_r+0x1a>
 8003394:	682b      	ldr	r3, [r5, #0]
 8003396:	b103      	cbz	r3, 800339a <_isatty_r+0x1a>
 8003398:	6023      	str	r3, [r4, #0]
 800339a:	bd38      	pop	{r3, r4, r5, pc}
 800339c:	20000444 	.word	0x20000444

080033a0 <_lseek_r>:
 80033a0:	b538      	push	{r3, r4, r5, lr}
 80033a2:	4d07      	ldr	r5, [pc, #28]	; (80033c0 <_lseek_r+0x20>)
 80033a4:	4604      	mov	r4, r0
 80033a6:	4608      	mov	r0, r1
 80033a8:	4611      	mov	r1, r2
 80033aa:	2200      	movs	r2, #0
 80033ac:	602a      	str	r2, [r5, #0]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7fd fa46 	bl	8000840 <_lseek>
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	d102      	bne.n	80033be <_lseek_r+0x1e>
 80033b8:	682b      	ldr	r3, [r5, #0]
 80033ba:	b103      	cbz	r3, 80033be <_lseek_r+0x1e>
 80033bc:	6023      	str	r3, [r4, #0]
 80033be:	bd38      	pop	{r3, r4, r5, pc}
 80033c0:	20000444 	.word	0x20000444

080033c4 <__malloc_lock>:
 80033c4:	4801      	ldr	r0, [pc, #4]	; (80033cc <__malloc_lock+0x8>)
 80033c6:	f7ff be43 	b.w	8003050 <__retarget_lock_acquire_recursive>
 80033ca:	bf00      	nop
 80033cc:	2000043c 	.word	0x2000043c

080033d0 <__malloc_unlock>:
 80033d0:	4801      	ldr	r0, [pc, #4]	; (80033d8 <__malloc_unlock+0x8>)
 80033d2:	f7ff be3e 	b.w	8003052 <__retarget_lock_release_recursive>
 80033d6:	bf00      	nop
 80033d8:	2000043c 	.word	0x2000043c

080033dc <_read_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4d07      	ldr	r5, [pc, #28]	; (80033fc <_read_r+0x20>)
 80033e0:	4604      	mov	r4, r0
 80033e2:	4608      	mov	r0, r1
 80033e4:	4611      	mov	r1, r2
 80033e6:	2200      	movs	r2, #0
 80033e8:	602a      	str	r2, [r5, #0]
 80033ea:	461a      	mov	r2, r3
 80033ec:	f7fd f9e4 	bl	80007b8 <_read>
 80033f0:	1c43      	adds	r3, r0, #1
 80033f2:	d102      	bne.n	80033fa <_read_r+0x1e>
 80033f4:	682b      	ldr	r3, [r5, #0]
 80033f6:	b103      	cbz	r3, 80033fa <_read_r+0x1e>
 80033f8:	6023      	str	r3, [r4, #0]
 80033fa:	bd38      	pop	{r3, r4, r5, pc}
 80033fc:	20000444 	.word	0x20000444

08003400 <_init>:
 8003400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003402:	bf00      	nop
 8003404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003406:	bc08      	pop	{r3}
 8003408:	469e      	mov	lr, r3
 800340a:	4770      	bx	lr

0800340c <_fini>:
 800340c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340e:	bf00      	nop
 8003410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003412:	bc08      	pop	{r3}
 8003414:	469e      	mov	lr, r3
 8003416:	4770      	bx	lr
